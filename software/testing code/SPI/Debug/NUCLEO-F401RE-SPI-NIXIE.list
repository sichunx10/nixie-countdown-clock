
NUCLEO-F401RE-SPI-NIXIE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031bc  080031bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  080031d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080031d0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095e1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d7  00000000  00000000  0002961d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016356  00000000  00000000  0002c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5e0  00000000  00000000  00042506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba9d  00000000  00000000  0004cae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8583  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000d85d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003164 	.word	0x08003164

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003164 	.word	0x08003164

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Start_Animation>:

// State Functions:
void(*state)();


void Start_Animation(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08e      	sub	sp, #56	; 0x38
 80004dc:	af00      	add	r7, sp, #0
	Set_None();
 80004de:	f000 fc0d 	bl	8000cfc <Set_None>
	HAL_Delay(100);
 80004e2:	2064      	movs	r0, #100	; 0x64
 80004e4:	f000 fe14 	bl	8001110 <HAL_Delay>
	int day1 = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	607b      	str	r3, [r7, #4]
	int day2 = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
	int hour1 = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	633b      	str	r3, [r7, #48]	; 0x30
	int hour2 = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int min1 = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28
	int min2 = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
	int sec1 = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	623b      	str	r3, [r7, #32]
	int sec2 = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	603b      	str	r3, [r7, #0]

	//Set Countdown

	dayone:
	while (1){
		for (int i=0; i<10; i++) {
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
 800050c:	e017      	b.n	800053e <Start_Animation+0x66>
			Set_Digit(5, i, 127);
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	227f      	movs	r2, #127	; 0x7f
 8000514:	4619      	mov	r1, r3
 8000516:	2005      	movs	r0, #5
 8000518:	f000 fb44 	bl	8000ba4 <Set_Digit>
			HAL_Delay(1000);
 800051c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000520:	f000 fdf6 	bl	8001110 <HAL_Delay>
			day1 = i;
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	607b      	str	r3, [r7, #4]
			if(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET){
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	48a2      	ldr	r0, [pc, #648]	; (80007b8 <Start_Animation+0x2e0>)
 800052e:	f001 f87d 	bl	800162c <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d006      	beq.n	8000546 <Start_Animation+0x6e>
		for (int i=0; i<10; i++) {
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	3301      	adds	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	2b09      	cmp	r3, #9
 8000542:	dde4      	ble.n	800050e <Start_Animation+0x36>
 8000544:	e7e0      	b.n	8000508 <Start_Animation+0x30>
				goto daytwo;
 8000546:	bf00      	nop
		}
	}

	daytwo:
	while (1){
		for (int i=0; i<10; i++) {
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
 800054c:	e017      	b.n	800057e <Start_Animation+0xa6>
			Set_Digit(1, i, 127);
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	227f      	movs	r2, #127	; 0x7f
 8000554:	4619      	mov	r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fb24 	bl	8000ba4 <Set_Digit>
			HAL_Delay(1000);
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f000 fdd6 	bl	8001110 <HAL_Delay>
			day2 = i;
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	637b      	str	r3, [r7, #52]	; 0x34
			if(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET){
 8000568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056c:	4892      	ldr	r0, [pc, #584]	; (80007b8 <Start_Animation+0x2e0>)
 800056e:	f001 f85d 	bl	800162c <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d006      	beq.n	8000586 <Start_Animation+0xae>
		for (int i=0; i<10; i++) {
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	3301      	adds	r3, #1
 800057c:	61bb      	str	r3, [r7, #24]
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	2b09      	cmp	r3, #9
 8000582:	dde4      	ble.n	800054e <Start_Animation+0x76>
 8000584:	e7e0      	b.n	8000548 <Start_Animation+0x70>
				goto hourone;
 8000586:	bf00      	nop
		}
	}

	hourone:
	while (1){
		for (int i=0; i<10; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e017      	b.n	80005be <Start_Animation+0xe6>
			Set_Digit(1, i, 127);
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	227f      	movs	r2, #127	; 0x7f
 8000594:	4619      	mov	r1, r3
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fb04 	bl	8000ba4 <Set_Digit>
			HAL_Delay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f000 fdb6 	bl	8001110 <HAL_Delay>
			hour1 = i;
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
			if(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET){
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4882      	ldr	r0, [pc, #520]	; (80007b8 <Start_Animation+0x2e0>)
 80005ae:	f001 f83d 	bl	800162c <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d006      	beq.n	80005c6 <Start_Animation+0xee>
		for (int i=0; i<10; i++) {
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	2b09      	cmp	r3, #9
 80005c2:	dde4      	ble.n	800058e <Start_Animation+0xb6>
 80005c4:	e7e0      	b.n	8000588 <Start_Animation+0xb0>
				goto hourtwo;
 80005c6:	bf00      	nop
		}
	}

	hourtwo:
	while (1){
		for (int i=0; i<10; i++) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	e017      	b.n	80005fe <Start_Animation+0x126>
			Set_Digit(1, i, 127);
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	227f      	movs	r2, #127	; 0x7f
 80005d4:	4619      	mov	r1, r3
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 fae4 	bl	8000ba4 <Set_Digit>
			HAL_Delay(1000);
 80005dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e0:	f000 fd96 	bl	8001110 <HAL_Delay>
			hour2 = i;
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET){
 80005e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ec:	4872      	ldr	r0, [pc, #456]	; (80007b8 <Start_Animation+0x2e0>)
 80005ee:	f001 f81d 	bl	800162c <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d006      	beq.n	8000606 <Start_Animation+0x12e>
		for (int i=0; i<10; i++) {
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	3301      	adds	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	2b09      	cmp	r3, #9
 8000602:	dde4      	ble.n	80005ce <Start_Animation+0xf6>
 8000604:	e7e0      	b.n	80005c8 <Start_Animation+0xf0>
				goto minone;
 8000606:	bf00      	nop
		}
	}

	minone:
	while (1){
		for (int i=0; i<10; i++) {
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e017      	b.n	800063e <Start_Animation+0x166>
			Set_Digit(1, i, 127);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	227f      	movs	r2, #127	; 0x7f
 8000614:	4619      	mov	r1, r3
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fac4 	bl	8000ba4 <Set_Digit>
			HAL_Delay(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000620:	f000 fd76 	bl	8001110 <HAL_Delay>
			min1 = i;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
			if(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET){
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	4862      	ldr	r0, [pc, #392]	; (80007b8 <Start_Animation+0x2e0>)
 800062e:	f000 fffd 	bl	800162c <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d006      	beq.n	8000646 <Start_Animation+0x16e>
		for (int i=0; i<10; i++) {
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b09      	cmp	r3, #9
 8000642:	dde4      	ble.n	800060e <Start_Animation+0x136>
 8000644:	e7e0      	b.n	8000608 <Start_Animation+0x130>
				goto mintwo;
 8000646:	bf00      	nop
		}
	}

	mintwo:
	while (1){
		for (int i=0; i<10; i++) {
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	e017      	b.n	800067e <Start_Animation+0x1a6>
			Set_Digit(1, i, 127);
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	227f      	movs	r2, #127	; 0x7f
 8000654:	4619      	mov	r1, r3
 8000656:	2001      	movs	r0, #1
 8000658:	f000 faa4 	bl	8000ba4 <Set_Digit>
			HAL_Delay(1000);
 800065c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000660:	f000 fd56 	bl	8001110 <HAL_Delay>
			min2 = i;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
			if(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET){
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4852      	ldr	r0, [pc, #328]	; (80007b8 <Start_Animation+0x2e0>)
 800066e:	f000 ffdd 	bl	800162c <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d006      	beq.n	8000686 <Start_Animation+0x1ae>
		for (int i=0; i<10; i++) {
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	3301      	adds	r3, #1
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	2b09      	cmp	r3, #9
 8000682:	dde4      	ble.n	800064e <Start_Animation+0x176>
 8000684:	e7e0      	b.n	8000648 <Start_Animation+0x170>
				goto clockloop;
 8000686:	bf00      	nop

	clockloop:
	// Clock Loop
	while(1){
		//calculate the next second
		sec2 -= 1;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	3b01      	subs	r3, #1
 800068c:	603b      	str	r3, [r7, #0]
		if (sec2 == -1){
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d104      	bne.n	80006a0 <Start_Animation+0x1c8>
			sec1 -= 1;
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	3b01      	subs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
			sec2 = 9;
 800069c:	2309      	movs	r3, #9
 800069e:	603b      	str	r3, [r7, #0]
		}
		if (sec1 == -1){
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a6:	d106      	bne.n	80006b6 <Start_Animation+0x1de>
			min2 -= 1;
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	3b01      	subs	r3, #1
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
			sec1 = 5;
 80006ae:	2305      	movs	r3, #5
 80006b0:	623b      	str	r3, [r7, #32]
			sec2 = 9;
 80006b2:	2309      	movs	r3, #9
 80006b4:	603b      	str	r3, [r7, #0]
		}
		if (min2 == -1){
 80006b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d108      	bne.n	80006d0 <Start_Animation+0x1f8>
			min1 -= 1;
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	3b01      	subs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
			min2 = 9;
 80006c4:	2309      	movs	r3, #9
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
			sec1 = 5;
 80006c8:	2305      	movs	r3, #5
 80006ca:	623b      	str	r3, [r7, #32]
			sec2 = 9;
 80006cc:	2309      	movs	r3, #9
 80006ce:	603b      	str	r3, [r7, #0]
		}
		if (min1 == -1){
 80006d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d6:	d10a      	bne.n	80006ee <Start_Animation+0x216>
			hour2 -= 1;
 80006d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006da:	3b01      	subs	r3, #1
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
			min1 = 5;
 80006de:	2305      	movs	r3, #5
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
			min2 = 9;
 80006e2:	2309      	movs	r3, #9
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
			sec1 = 5;
 80006e6:	2305      	movs	r3, #5
 80006e8:	623b      	str	r3, [r7, #32]
			sec2 = 9;
 80006ea:	2309      	movs	r3, #9
 80006ec:	603b      	str	r3, [r7, #0]
		}
		if (hour2 == -1){
 80006ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f4:	d10c      	bne.n	8000710 <Start_Animation+0x238>
			hour1 -= 1;
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	3b01      	subs	r3, #1
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
			hour2 = 9;
 80006fc:	2309      	movs	r3, #9
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			min1 = 5;
 8000700:	2305      	movs	r3, #5
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
			min2 = 9;
 8000704:	2309      	movs	r3, #9
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
			sec1 = 5;
 8000708:	2305      	movs	r3, #5
 800070a:	623b      	str	r3, [r7, #32]
			sec2 = 9;
 800070c:	2309      	movs	r3, #9
 800070e:	603b      	str	r3, [r7, #0]
		}
		if (hour1 == -1){
 8000710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000716:	d10e      	bne.n	8000736 <Start_Animation+0x25e>
			day2 -= 1;
 8000718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071a:	3b01      	subs	r3, #1
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
			hour1 = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
			hour2 = 3;
 8000722:	2303      	movs	r3, #3
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
			min1 = 5;
 8000726:	2305      	movs	r3, #5
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
			min2 = 9;
 800072a:	2309      	movs	r3, #9
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
			sec1 = 5;
 800072e:	2305      	movs	r3, #5
 8000730:	623b      	str	r3, [r7, #32]
			sec2 = 9;
 8000732:	2309      	movs	r3, #9
 8000734:	603b      	str	r3, [r7, #0]
		}
		if (day2 == -1){
 8000736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800073c:	d110      	bne.n	8000760 <Start_Animation+0x288>
			day1 -= 1;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3b01      	subs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
			day2 = 9;
 8000744:	2309      	movs	r3, #9
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
			hour1 = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
			hour2 = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
			min1 = 5;
 8000750:	2305      	movs	r3, #5
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
			min2 = 9;
 8000754:	2309      	movs	r3, #9
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
			sec1 = 5;
 8000758:	2305      	movs	r3, #5
 800075a:	623b      	str	r3, [r7, #32]
			sec2 = 9;
 800075c:	2309      	movs	r3, #9
 800075e:	603b      	str	r3, [r7, #0]
		}
		if (day1 = -1){
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	607b      	str	r3, [r7, #4]
			while(1){
				//display zeros
				Set_Digit(1, 0, 127);
 8000766:	227f      	movs	r2, #127	; 0x7f
 8000768:	2100      	movs	r1, #0
 800076a:	2001      	movs	r0, #1
 800076c:	f000 fa1a 	bl	8000ba4 <Set_Digit>
				Set_Digit(2, 0, 127);
 8000770:	227f      	movs	r2, #127	; 0x7f
 8000772:	2100      	movs	r1, #0
 8000774:	2002      	movs	r0, #2
 8000776:	f000 fa15 	bl	8000ba4 <Set_Digit>
				Set_Digit(3, 0, 127);
 800077a:	227f      	movs	r2, #127	; 0x7f
 800077c:	2100      	movs	r1, #0
 800077e:	2003      	movs	r0, #3
 8000780:	f000 fa10 	bl	8000ba4 <Set_Digit>
				Set_Digit(4, 0, 127);
 8000784:	227f      	movs	r2, #127	; 0x7f
 8000786:	2100      	movs	r1, #0
 8000788:	2004      	movs	r0, #4
 800078a:	f000 fa0b 	bl	8000ba4 <Set_Digit>
				Set_Digit(5, 0, 127);
 800078e:	227f      	movs	r2, #127	; 0x7f
 8000790:	2100      	movs	r1, #0
 8000792:	2005      	movs	r0, #5
 8000794:	f000 fa06 	bl	8000ba4 <Set_Digit>
				Set_Digit(6, 0, 127);
 8000798:	227f      	movs	r2, #127	; 0x7f
 800079a:	2100      	movs	r1, #0
 800079c:	2006      	movs	r0, #6
 800079e:	f000 fa01 	bl	8000ba4 <Set_Digit>
				HAL_Delay(900);
 80007a2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80007a6:	f000 fcb3 	bl	8001110 <HAL_Delay>

				Set_None();
 80007aa:	f000 faa7 	bl	8000cfc <Set_None>
				HAL_Delay(100);
 80007ae:	2064      	movs	r0, #100	; 0x64
 80007b0:	f000 fcae 	bl	8001110 <HAL_Delay>
				Set_Digit(1, 0, 127);
 80007b4:	e7d7      	b.n	8000766 <Start_Animation+0x28e>
 80007b6:	bf00      	nop
 80007b8:	40020800 	.word	0x40020800

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	state = Start_Animation; //set the starting state
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <main+0x2c>)
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <main+0x30>)
 80007c4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fc31 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f811 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 f94d 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 f921 	bl	8000a18 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007d6:	f000 f8e9 	bl	80009ac <MX_SPI1_Init>
  MX_RTC_Init();
 80007da:	f000 f88d 	bl	80008f8 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	state();
 80007de:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <main+0x2c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4798      	blx	r3
 80007e4:	e7fb      	b.n	80007de <main+0x22>
 80007e6:	bf00      	nop
 80007e8:	200000e4 	.word	0x200000e4
 80007ec:	080004d9 	.word	0x080004d9

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b098      	sub	sp, #96	; 0x60
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fca8 	bl	8003154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <SystemClock_Config+0x100>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <SystemClock_Config+0x100>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <SystemClock_Config+0x100>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <SystemClock_Config+0x104>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800084c:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <SystemClock_Config+0x104>)
 800084e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <SystemClock_Config+0x104>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000860:	230a      	movs	r3, #10
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000868:	2310      	movs	r3, #16
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000874:	2300      	movs	r3, #0
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000878:	2310      	movs	r3, #16
 800087a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800087c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000880:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000882:	2304      	movs	r3, #4
 8000884:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000886:	2307      	movs	r3, #7
 8000888:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fefe 	bl	8001690 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800089a:	f000 fa8d 	bl	8000db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	2102      	movs	r1, #2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 f960 	bl	8001b80 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008c6:	f000 fa77 	bl	8000db8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fb71 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80008e4:	f000 fa68 	bl	8000db8 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3760      	adds	r7, #96	; 0x60
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_RTC_Init+0xac>)
 8000912:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <MX_RTC_Init+0xb0>)
 8000914:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_RTC_Init+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_RTC_Init+0xac>)
 800091e:	227f      	movs	r2, #127	; 0x7f
 8000920:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_RTC_Init+0xac>)
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_RTC_Init+0xac>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_RTC_Init+0xac>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_RTC_Init+0xac>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800093a:	481a      	ldr	r0, [pc, #104]	; (80009a4 <MX_RTC_Init+0xac>)
 800093c:	f001 fc2e 	bl	800219c <HAL_RTC_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 fa37 	bl	8000db8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800094a:	2300      	movs	r3, #0
 800094c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800094e:	2300      	movs	r3, #0
 8000950:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000952:	2300      	movs	r3, #0
 8000954:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2201      	movs	r2, #1
 8000962:	4619      	mov	r1, r3
 8000964:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_RTC_Init+0xac>)
 8000966:	f001 fcaa 	bl	80022be <HAL_RTC_SetTime>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000970:	f000 fa22 	bl	8000db8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000974:	2301      	movs	r3, #1
 8000976:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000978:	2302      	movs	r3, #2
 800097a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 800097c:	2306      	movs	r3, #6
 800097e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000980:	2323      	movs	r3, #35	; 0x23
 8000982:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	2201      	movs	r2, #1
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_RTC_Init+0xac>)
 800098c:	f001 fd54 	bl	8002438 <HAL_RTC_SetDate>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000996:	f000 fa0f 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028
 80009a8:	40002800 	.word	0x40002800

080009ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <MX_SPI1_Init+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009e0:	2230      	movs	r2, #48	; 0x30
 80009e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009f8:	220a      	movs	r2, #10
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009fe:	f001 fe34 	bl	800266a <HAL_SPI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a08:	f000 f9d6 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000048 	.word	0x20000048
 8000a14:	40013000 	.word	0x40013000

08000a18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART2_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f002 f89a 	bl	8002b88 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f000 f9ad 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000a0 	.word	0x200000a0
 8000a68:	40004400 	.word	0x40004400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a41      	ldr	r2, [pc, #260]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a3a      	ldr	r2, [pc, #232]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a33      	ldr	r2, [pc, #204]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a2c      	ldr	r2, [pc, #176]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000af8:	4826      	ldr	r0, [pc, #152]	; (8000b94 <MX_GPIO_Init+0x128>)
 8000afa:	f000 fdaf 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	4825      	ldr	r0, [pc, #148]	; (8000b98 <MX_GPIO_Init+0x12c>)
 8000b04:	f000 fdaa 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b0e:	4823      	ldr	r0, [pc, #140]	; (8000b9c <MX_GPIO_Init+0x130>)
 8000b10:	f000 fda4 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_GPIO_Init+0x134>)
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481b      	ldr	r0, [pc, #108]	; (8000b98 <MX_GPIO_Init+0x12c>)
 8000b2a:	f000 fbfb 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_6;
 8000b2e:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4813      	ldr	r0, [pc, #76]	; (8000b94 <MX_GPIO_Init+0x128>)
 8000b48:	f000 fbec 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_GPIO_Init+0x12c>)
 8000b64:	f000 fbde 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_GPIO_Init+0x130>)
 8000b82:	f000 fbcf 	bl	8001324 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	10210000 	.word	0x10210000

08000ba4 <Set_Digit>:

/* USER CODE BEGIN 4 */
void Set_Digit(int location, uint8_t digit, uint8_t brightness)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	70bb      	strb	r3, [r7, #2]
	uint8_t EXIXE_DIGIT[16] = {0b10101010, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000};
 8000bb4:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <Set_Digit+0x144>)
 8000bb6:	f107 0408 	add.w	r4, r7, #8
 8000bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(digit != 0)
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d008      	beq.n	8000bd8 <Set_Digit+0x34>
	{
		EXIXE_DIGIT[digit] = brightness + 0b10000000;
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	78ba      	ldrb	r2, [r7, #2]
 8000bca:	3a80      	subs	r2, #128	; 0x80
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	3318      	adds	r3, #24
 8000bd0:	443b      	add	r3, r7
 8000bd2:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000bd6:	e006      	b.n	8000be6 <Set_Digit+0x42>
	}
	else if(digit == 0)
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <Set_Digit+0x42>
	{
		EXIXE_DIGIT[10] = brightness + 0b10000000;
 8000bde:	78bb      	ldrb	r3, [r7, #2]
 8000be0:	3b80      	subs	r3, #128	; 0x80
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	74bb      	strb	r3, [r7, #18]
	}

	//Set the proper CS pin to LOW
	switch(location){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	2b05      	cmp	r3, #5
 8000bec:	d835      	bhi.n	8000c5a <Set_Digit+0xb6>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <Set_Digit+0x50>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c0d 	.word	0x08000c0d
 8000bf8:	08000c19 	.word	0x08000c19
 8000bfc:	08000c27 	.word	0x08000c27
 8000c00:	08000c35 	.word	0x08000c35
 8000c04:	08000c43 	.word	0x08000c43
 8000c08:	08000c4f 	.word	0x08000c4f
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4836      	ldr	r0, [pc, #216]	; (8000cec <Set_Digit+0x148>)
 8000c12:	f000 fd23 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000c16:	e020      	b.n	8000c5a <Set_Digit+0xb6>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1e:	4833      	ldr	r0, [pc, #204]	; (8000cec <Set_Digit+0x148>)
 8000c20:	f000 fd1c 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000c24:	e019      	b.n	8000c5a <Set_Digit+0xb6>
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2c:	4830      	ldr	r0, [pc, #192]	; (8000cf0 <Set_Digit+0x14c>)
 8000c2e:	f000 fd15 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000c32:	e012      	b.n	8000c5a <Set_Digit+0xb6>
	case 4:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3a:	482d      	ldr	r0, [pc, #180]	; (8000cf0 <Set_Digit+0x14c>)
 8000c3c:	f000 fd0e 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000c40:	e00b      	b.n	8000c5a <Set_Digit+0xb6>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	482b      	ldr	r0, [pc, #172]	; (8000cf4 <Set_Digit+0x150>)
 8000c48:	f000 fd08 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000c4c:	e005      	b.n	8000c5a <Set_Digit+0xb6>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	4826      	ldr	r0, [pc, #152]	; (8000cec <Set_Digit+0x148>)
 8000c54:	f000 fd02 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000c58:	bf00      	nop
	}
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIGIT, 16, 100);
 8000c5a:	f107 0108 	add.w	r1, r7, #8
 8000c5e:	2364      	movs	r3, #100	; 0x64
 8000c60:	2210      	movs	r2, #16
 8000c62:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <Set_Digit+0x154>)
 8000c64:	f001 fd8a 	bl	800277c <HAL_SPI_Transmit>

	//Set the proper CS pin to HIGH
	switch(location){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d836      	bhi.n	8000cde <Set_Digit+0x13a>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <Set_Digit+0xd4>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c91 	.word	0x08000c91
 8000c7c:	08000c9d 	.word	0x08000c9d
 8000c80:	08000cab 	.word	0x08000cab
 8000c84:	08000cb9 	.word	0x08000cb9
 8000c88:	08000cc7 	.word	0x08000cc7
 8000c8c:	08000cd3 	.word	0x08000cd3
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4815      	ldr	r0, [pc, #84]	; (8000cec <Set_Digit+0x148>)
 8000c96:	f000 fce1 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000c9a:	e020      	b.n	8000cde <Set_Digit+0x13a>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca2:	4812      	ldr	r0, [pc, #72]	; (8000cec <Set_Digit+0x148>)
 8000ca4:	f000 fcda 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000ca8:	e019      	b.n	8000cde <Set_Digit+0x13a>
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <Set_Digit+0x14c>)
 8000cb2:	f000 fcd3 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000cb6:	e012      	b.n	8000cde <Set_Digit+0x13a>
	case 4:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <Set_Digit+0x14c>)
 8000cc0:	f000 fccc 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000cc4:	e00b      	b.n	8000cde <Set_Digit+0x13a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <Set_Digit+0x150>)
 8000ccc:	f000 fcc6 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000cd0:	e005      	b.n	8000cde <Set_Digit+0x13a>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <Set_Digit+0x148>)
 8000cd8:	f000 fcc0 	bl	800165c <HAL_GPIO_WritePin>
		break;
 8000cdc:	bf00      	nop
	}
}
 8000cde:	bf00      	nop
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	0800317c 	.word	0x0800317c
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	20000048 	.word	0x20000048

08000cfc <Set_None>:

void Set_None()
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
	uint8_t EXIXE_NONE[16] = {0b10101010, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000};
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <Set_None+0xa8>)
 8000d04:	463c      	mov	r4, r7
 8000d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//turn the CS pin on high for each nixie
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2110      	movs	r1, #16
 8000d10:	4825      	ldr	r0, [pc, #148]	; (8000da8 <Set_None+0xac>)
 8000d12:	f000 fca3 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1c:	4822      	ldr	r0, [pc, #136]	; (8000da8 <Set_None+0xac>)
 8000d1e:	f000 fc9d 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d28:	4820      	ldr	r0, [pc, #128]	; (8000dac <Set_None+0xb0>)
 8000d2a:	f000 fc97 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	481d      	ldr	r0, [pc, #116]	; (8000dac <Set_None+0xb0>)
 8000d36:	f000 fc91 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	481c      	ldr	r0, [pc, #112]	; (8000db0 <Set_None+0xb4>)
 8000d40:	f000 fc8c 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	4817      	ldr	r0, [pc, #92]	; (8000da8 <Set_None+0xac>)
 8000d4a:	f000 fc87 	bl	800165c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_NONE, 16, 100);
 8000d4e:	4639      	mov	r1, r7
 8000d50:	2364      	movs	r3, #100	; 0x64
 8000d52:	2210      	movs	r2, #16
 8000d54:	4817      	ldr	r0, [pc, #92]	; (8000db4 <Set_None+0xb8>)
 8000d56:	f001 fd11 	bl	800277c <HAL_SPI_Transmit>

	//turn the CS pin on high for each nixie
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4812      	ldr	r0, [pc, #72]	; (8000da8 <Set_None+0xac>)
 8000d60:	f000 fc7c 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <Set_None+0xac>)
 8000d6c:	f000 fc76 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <Set_None+0xb0>)
 8000d78:	f000 fc70 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <Set_None+0xb0>)
 8000d84:	f000 fc6a 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <Set_None+0xb4>)
 8000d8e:	f000 fc65 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <Set_None+0xac>)
 8000d98:	f000 fc60 	bl	800165c <HAL_GPIO_WritePin>
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	0800318c 	.word	0x0800318c
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	20000048 	.word	0x20000048

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e02:	2007      	movs	r0, #7
 8000e04:	f000 fa5a 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <HAL_RTC_MspInit+0x24>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d102      	bne.n	8000e2c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_RTC_MspInit+0x28>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40002800 	.word	0x40002800
 8000e3c:	42470e3c 	.word	0x42470e3c

08000e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_SPI_MspInit+0x84>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d12b      	bne.n	8000eba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_SPI_MspInit+0x88>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_SPI_MspInit+0x88>)
 8000e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_SPI_MspInit+0x88>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_SPI_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_SPI_MspInit+0x88>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_SPI_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e9a:	23a0      	movs	r3, #160	; 0xa0
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_SPI_MspInit+0x8c>)
 8000eb6:	f000 fa35 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40013000 	.word	0x40013000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12b      	bne.n	8000f4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_UART_MspInit+0x8c>)
 8000f46:	f000 f9ed 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f890 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff4:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001002:	f7ff ffd7 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f002 f881 	bl	800310c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fbd7 	bl	80007bc <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001010:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800101c:	080031c4 	.word	0x080031c4
  ldr r2, =_sbss
 8001020:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001024:	200000ec 	.word	0x200000ec

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f931 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff feb0 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f93b 	bl	800130a <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f911 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	200000e8 	.word	0x200000e8

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200000e8 	.word	0x200000e8

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff47 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff5c 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff8e 	bl	8001210 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffb0 	bl	8001278 <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e159      	b.n	80015f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8148 	bne.w	80015ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001372:	2b02      	cmp	r3, #2
 8001374:	d130      	bne.n	80013d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d017      	beq.n	8001414 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a2 	beq.w	80015ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b54      	ldr	r3, [pc, #336]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x202>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2f4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x1fe>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_GPIO_Init+0x2f8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x1fa>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_GPIO_Init+0x2fc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x1f6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a45      	ldr	r2, [pc, #276]	; (8001624 <HAL_GPIO_Init+0x300>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x1f2>
 8001512:	2304      	movs	r3, #4
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001516:	2307      	movs	r3, #7
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001526:	2300      	movs	r3, #0
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001538:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <HAL_GPIO_Init+0x304>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_GPIO_Init+0x304>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	f67f aea2 	bls.w	8001340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e001      	b.n	800164e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001678:	e003      	b.n	8001682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	041a      	lsls	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e267      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d075      	beq.n	800179a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d00c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4b85      	ldr	r3, [pc, #532]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d112      	bne.n	80016ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c6:	4b82      	ldr	r3, [pc, #520]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016d2:	d10b      	bne.n	80016ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d05b      	beq.n	8001798 <HAL_RCC_OscConfig+0x108>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d157      	bne.n	8001798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e242      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d106      	bne.n	8001704 <HAL_RCC_OscConfig+0x74>
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a75      	ldr	r2, [pc, #468]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e01d      	b.n	8001740 <HAL_RCC_OscConfig+0xb0>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x98>
 800170e:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6f      	ldr	r2, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a6c      	ldr	r2, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0xb0>
 8001728:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a68      	ldr	r2, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a65      	ldr	r2, [pc, #404]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fcd6 	bl	80010f8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fcd2 	bl	80010f8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e207      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0xc0>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fcc2 	bl	80010f8 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fcbe 	bl	80010f8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1f3      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0xe8>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d063      	beq.n	800186e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d11c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x152>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e1c7      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4937      	ldr	r1, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	e03a      	b.n	800186e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <HAL_RCC_OscConfig+0x244>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fc77 	bl	80010f8 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fc73 	bl	80010f8 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1a8      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4925      	ldr	r1, [pc, #148]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e015      	b.n	800186e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x244>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fc56 	bl	80010f8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fc52 	bl	80010f8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e187      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d036      	beq.n	80018e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d016      	beq.n	80018b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_RCC_OscConfig+0x248>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff fc36 	bl	80010f8 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff fc32 	bl	80010f8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e167      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80018a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x200>
 80018ae:	e01b      	b.n	80018e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_OscConfig+0x248>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fc1f 	bl	80010f8 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	e00e      	b.n	80018dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018be:	f7ff fc1b 	bl	80010f8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d907      	bls.n	80018dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e150      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
 80018d0:	40023800 	.word	0x40023800
 80018d4:	42470000 	.word	0x42470000
 80018d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80018de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ea      	bne.n	80018be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8097 	beq.w	8001a24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a7c      	ldr	r2, [pc, #496]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b7a      	ldr	r3, [pc, #488]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001926:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <HAL_RCC_OscConfig+0x474>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001932:	4b74      	ldr	r3, [pc, #464]	; (8001b04 <HAL_RCC_OscConfig+0x474>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a73      	ldr	r2, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x474>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193e:	f7ff fbdb 	bl	80010f8 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001946:	f7ff fbd7 	bl	80010f8 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e10c      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_OscConfig+0x474>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x2ea>
 800196c:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
 8001978:	e01c      	b.n	80019b4 <HAL_RCC_OscConfig+0x324>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b05      	cmp	r3, #5
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x30c>
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a5b      	ldr	r2, [pc, #364]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0x324>
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a57      	ldr	r2, [pc, #348]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
 80019a8:	4b55      	ldr	r3, [pc, #340]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ac:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80019ae:	f023 0304 	bic.w	r3, r3, #4
 80019b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff fb9c 	bl	80010f8 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c4:	f7ff fb98 	bl	80010f8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0cb      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0ee      	beq.n	80019c4 <HAL_RCC_OscConfig+0x334>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7ff fb86 	bl	80010f8 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff fb82 	bl	80010f8 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0b5      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a06:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ee      	bne.n	80019f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a38      	ldr	r2, [pc, #224]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a1 	beq.w	8001b70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d05c      	beq.n	8001af4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d141      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_RCC_OscConfig+0x478>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb56 	bl	80010f8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fb52 	bl	80010f8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e087      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	019b      	lsls	r3, r3, #6
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	061b      	lsls	r3, r3, #24
 8001a92:	491b      	ldr	r1, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_RCC_OscConfig+0x478>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fb2b 	bl	80010f8 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff fb27 	bl	80010f8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e05c      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x416>
 8001ac4:	e054      	b.n	8001b70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_RCC_OscConfig+0x478>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fb14 	bl	80010f8 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff fb10 	bl	80010f8 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e045      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x444>
 8001af2:	e03d      	b.n	8001b70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e038      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40007000 	.word	0x40007000
 8001b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x4ec>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d028      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d121      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d11a      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0cc      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d90c      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b65      	ldr	r3, [pc, #404]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b8      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	494d      	ldr	r1, [pc, #308]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d044      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e07f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e06f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e067      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4934      	ldr	r1, [pc, #208]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff fa42 	bl	80010f8 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff fa3e 	bl	80010f8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e04f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 020c 	and.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1eb      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d20c      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e032      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4916      	ldr	r1, [pc, #88]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d06:	f000 f821 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	490a      	ldr	r1, [pc, #40]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	5ccb      	ldrb	r3, [r1, r3]
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f9a2 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	0800319c 	.word	0x0800319c
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d50:	b094      	sub	sp, #80	; 0x50
 8001d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
 8001d58:	2300      	movs	r3, #0
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d64:	4b79      	ldr	r3, [pc, #484]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d00d      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x40>
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	f200 80e1 	bhi.w	8001f38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x34>
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d7e:	e0db      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b73      	ldr	r3, [pc, #460]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d84:	e0db      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d86:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d8a:	e0d8      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d96:	4b6d      	ldr	r3, [pc, #436]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da2:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	2200      	movs	r2, #0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	f04f 0100 	mov.w	r1, #0
 8001dca:	0159      	lsls	r1, r3, #5
 8001dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd0:	0150      	lsls	r0, r2, #5
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	1a51      	subs	r1, r2, r1
 8001dda:	6139      	str	r1, [r7, #16]
 8001ddc:	4629      	mov	r1, r5
 8001dde:	eb63 0301 	sbc.w	r3, r3, r1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001df0:	4659      	mov	r1, fp
 8001df2:	018b      	lsls	r3, r1, #6
 8001df4:	4651      	mov	r1, sl
 8001df6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dfa:	4651      	mov	r1, sl
 8001dfc:	018a      	lsls	r2, r1, #6
 8001dfe:	4651      	mov	r1, sl
 8001e00:	ebb2 0801 	subs.w	r8, r2, r1
 8001e04:	4659      	mov	r1, fp
 8001e06:	eb63 0901 	sbc.w	r9, r3, r1
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e1e:	4690      	mov	r8, r2
 8001e20:	4699      	mov	r9, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	eb18 0303 	adds.w	r3, r8, r3
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	462b      	mov	r3, r5
 8001e2c:	eb49 0303 	adc.w	r3, r9, r3
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e3e:	4629      	mov	r1, r5
 8001e40:	024b      	lsls	r3, r1, #9
 8001e42:	4621      	mov	r1, r4
 8001e44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e48:	4621      	mov	r1, r4
 8001e4a:	024a      	lsls	r2, r1, #9
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e52:	2200      	movs	r2, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e5c:	f7fe f9ba 	bl	80001d4 <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e68:	e058      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	2200      	movs	r2, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	4611      	mov	r1, r2
 8001e76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e7a:	623b      	str	r3, [r7, #32]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e84:	4642      	mov	r2, r8
 8001e86:	464b      	mov	r3, r9
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	0159      	lsls	r1, r3, #5
 8001e92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e96:	0150      	lsls	r0, r2, #5
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4641      	mov	r1, r8
 8001e9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ebc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ec0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	00eb      	lsls	r3, r5, #3
 8001ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ed2:	00e2      	lsls	r2, r4, #3
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	4643      	mov	r3, r8
 8001eda:	18e3      	adds	r3, r4, r3
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	464b      	mov	r3, r9
 8001ee0:	eb45 0303 	adc.w	r3, r5, r3
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	028b      	lsls	r3, r1, #10
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001efc:	4621      	mov	r1, r4
 8001efe:	028a      	lsls	r2, r1, #10
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	2200      	movs	r2, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	61fa      	str	r2, [r7, #28]
 8001f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f10:	f7fe f960 	bl	80001d4 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	0c1b      	lsrs	r3, r3, #16
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	3301      	adds	r3, #1
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f36:	e002      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3750      	adds	r7, #80	; 0x50
 8001f44:	46bd      	mov	sp, r7
 8001f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	00f42400 	.word	0x00f42400
 8001f54:	007a1200 	.word	0x007a1200

08001f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000000 	.word	0x20000000

08001f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f74:	f7ff fff0 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	080031ac 	.word	0x080031ac

08001f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f9c:	f7ff ffdc 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	0b5b      	lsrs	r3, r3, #13
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	080031ac 	.word	0x080031ac

08001fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d035      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fe8:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fee:	f7ff f883 	bl	80010f8 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ff6:	f7ff f87f 	bl	80010f8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0ba      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002008:	4b60      	ldr	r3, [pc, #384]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	019a      	lsls	r2, r3, #6
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	071b      	lsls	r3, r3, #28
 8002020:	495a      	ldr	r1, [pc, #360]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002028:	4b57      	ldr	r3, [pc, #348]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800202e:	f7ff f863 	bl	80010f8 <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002036:	f7ff f85f 	bl	80010f8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e09a      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8083 	beq.w	8002168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b46      	ldr	r3, [pc, #280]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800207e:	4b44      	ldr	r3, [pc, #272]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a43      	ldr	r2, [pc, #268]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002088:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800208a:	f7ff f835 	bl	80010f8 <HAL_GetTick>
 800208e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002092:	f7ff f831 	bl	80010f8 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e06c      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020a4:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d02f      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d028      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020de:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80020e4:	4a29      	ldr	r2, [pc, #164]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d114      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe ffff 	bl	80010f8 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fc:	e00a      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fffb 	bl	80010f8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e034      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ee      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800212c:	d10d      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	4912      	ldr	r1, [pc, #72]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
 8002148:	e005      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002150:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002154:	6093      	str	r3, [r2, #8]
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002162:	490a      	ldr	r1, [pc, #40]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002164:	4313      	orrs	r3, r2
 8002166:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7c1a      	ldrb	r2, [r3, #16]
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800217a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	42470068 	.word	0x42470068
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000
 8002194:	42470e40 	.word	0x42470e40
 8002198:	424711e0 	.word	0x424711e0

0800219c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e083      	b.n	80022b6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7f5b      	ldrb	r3, [r3, #29]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fe28 	bl	8000e14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	22ca      	movs	r2, #202	; 0xca
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2253      	movs	r2, #83	; 0x53
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f9fb 	bl	80025d6 <RTC_EnterInitMode>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e05e      	b.n	80022b6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800220a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68d2      	ldr	r2, [r2, #12]
 8002232:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6919      	ldr	r1, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002256:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10e      	bne.n	8002284 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f98d 	bl	8002586 <HAL_RTC_WaitForSynchro>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e018      	b.n	80022b6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	22ff      	movs	r2, #255	; 0xff
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022be:	b590      	push	{r4, r7, lr}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	7f1b      	ldrb	r3, [r3, #28]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_RTC_SetTime+0x1c>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0aa      	b.n	8002430 <HAL_RTC_SetTime+0x172>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2202      	movs	r2, #2
 80022e4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d126      	bne.n	800233a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2200      	movs	r2, #0
 80022fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f992 	bl	800262e <RTC_ByteToBcd2>
 800230a:	4603      	mov	r3, r0
 800230c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	785b      	ldrb	r3, [r3, #1]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f98b 	bl	800262e <RTC_ByteToBcd2>
 8002318:	4603      	mov	r3, r0
 800231a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800231c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	789b      	ldrb	r3, [r3, #2]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f983 	bl	800262e <RTC_ByteToBcd2>
 8002328:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800232a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	78db      	ldrb	r3, [r3, #3]
 8002332:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e018      	b.n	800236c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800235a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002360:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	78db      	ldrb	r3, [r3, #3]
 8002366:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	22ca      	movs	r2, #202	; 0xca
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2253      	movs	r2, #83	; 0x53
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f92a 	bl	80025d6 <RTC_EnterInitMode>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2204      	movs	r2, #4
 8002394:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e047      	b.n	8002430 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80023aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023ae:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023be:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6899      	ldr	r1, [r3, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d111      	bne.n	800241a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f8c5 	bl	8002586 <HAL_RTC_WaitForSynchro>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2204      	movs	r2, #4
 800240e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00a      	b.n	8002430 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	22ff      	movs	r2, #255	; 0xff
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800242e:	2300      	movs	r3, #0
  }
}
 8002430:	4618      	mov	r0, r3
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}

08002438 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	7f1b      	ldrb	r3, [r3, #28]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_RTC_SetDate+0x1c>
 8002450:	2302      	movs	r3, #2
 8002452:	e094      	b.n	800257e <HAL_RTC_SetDate+0x146>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2202      	movs	r2, #2
 800245e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10e      	bne.n	8002484 <HAL_RTC_SetDate+0x4c>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	f023 0310 	bic.w	r3, r3, #16
 800247a:	b2db      	uxtb	r3, r3
 800247c:	330a      	adds	r3, #10
 800247e:	b2da      	uxtb	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11c      	bne.n	80024c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	78db      	ldrb	r3, [r3, #3]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f8cd 	bl	800262e <RTC_ByteToBcd2>
 8002494:	4603      	mov	r3, r0
 8002496:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f8c6 	bl	800262e <RTC_ByteToBcd2>
 80024a2:	4603      	mov	r3, r0
 80024a4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80024a6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	789b      	ldrb	r3, [r3, #2]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f8be 	bl	800262e <RTC_ByteToBcd2>
 80024b2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80024b4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e00e      	b.n	80024e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80024d0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80024d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	22ca      	movs	r2, #202	; 0xca
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2253      	movs	r2, #83	; 0x53
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f86f 	bl	80025d6 <RTC_EnterInitMode>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2204      	movs	r2, #4
 800250a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e033      	b.n	800257e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002520:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002524:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002534:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d111      	bne.n	8002568 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f81e 	bl	8002586 <HAL_RTC_WaitForSynchro>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	22ff      	movs	r2, #255	; 0xff
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2204      	movs	r2, #4
 800255c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e00a      	b.n	800257e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	22ff      	movs	r2, #255	; 0xff
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800257c:	2300      	movs	r3, #0
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd90      	pop	{r4, r7, pc}

08002586 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025a2:	f7fe fda9 	bl	80010f8 <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025a8:	e009      	b.n	80025be <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025aa:	f7fe fda5 	bl	80010f8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b8:	d901      	bls.n	80025be <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e007      	b.n	80025ce <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ee      	beq.n	80025aa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d119      	bne.n	8002624 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025fa:	f7fe fd7d 	bl	80010f8 <HAL_GetTick>
 80025fe:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002600:	e009      	b.n	8002616 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002602:	f7fe fd79 	bl	80010f8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002610:	d901      	bls.n	8002616 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e007      	b.n	8002626 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ee      	beq.n	8002602 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800263c:	e005      	b.n	800264a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3301      	adds	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	3b0a      	subs	r3, #10
 8002648:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b09      	cmp	r3, #9
 800264e:	d8f6      	bhi.n	800263e <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	b2da      	uxtb	r2, r3
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	4313      	orrs	r3, r2
 800265c:	b2db      	uxtb	r3, r3
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e07b      	b.n	8002774 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d108      	bne.n	8002696 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800268c:	d009      	beq.n	80026a2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	61da      	str	r2, [r3, #28]
 8002694:	e005      	b.n	80026a2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7fe fbbf 	bl	8000e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002726:	ea42 0103 	orr.w	r1, r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	0c1b      	lsrs	r3, r3, #16
 8002740:	f003 0104 	and.w	r1, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f003 0210 	and.w	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002762:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_SPI_Transmit+0x22>
 800279a:	2302      	movs	r3, #2
 800279c:	e126      	b.n	80029ec <HAL_SPI_Transmit+0x270>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a6:	f7fe fca7 	bl	80010f8 <HAL_GetTick>
 80027aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d002      	beq.n	80027c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027c0:	e10b      	b.n	80029da <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_SPI_Transmit+0x52>
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027d2:	e102      	b.n	80029da <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2203      	movs	r2, #3
 80027d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800281a:	d10f      	bne.n	800283c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800282a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d007      	beq.n	800285a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002862:	d14b      	bne.n	80028fc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Transmit+0xf6>
 800286c:	8afb      	ldrh	r3, [r7, #22]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d13e      	bne.n	80028f0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002896:	e02b      	b.n	80028f0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d112      	bne.n	80028cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80028ca:	e011      	b.n	80028f0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028cc:	f7fe fc14 	bl	80010f8 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d803      	bhi.n	80028e4 <HAL_SPI_Transmit+0x168>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d102      	bne.n	80028ea <HAL_SPI_Transmit+0x16e>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028ee:	e074      	b.n	80029da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ce      	bne.n	8002898 <HAL_SPI_Transmit+0x11c>
 80028fa:	e04c      	b.n	8002996 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_SPI_Transmit+0x18e>
 8002904:	8afb      	ldrh	r3, [r7, #22]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d140      	bne.n	800298c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	330c      	adds	r3, #12
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002930:	e02c      	b.n	800298c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d113      	bne.n	8002968 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	7812      	ldrb	r2, [r2, #0]
 800294c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	86da      	strh	r2, [r3, #54]	; 0x36
 8002966:	e011      	b.n	800298c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002968:	f7fe fbc6 	bl	80010f8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d803      	bhi.n	8002980 <HAL_SPI_Transmit+0x204>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297e:	d102      	bne.n	8002986 <HAL_SPI_Transmit+0x20a>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	77fb      	strb	r3, [r7, #31]
          goto error;
 800298a:	e026      	b.n	80029da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1cd      	bne.n	8002932 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	6839      	ldr	r1, [r7, #0]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f8b2 	bl	8002b04 <SPI_EndRxTxTransaction>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	77fb      	strb	r3, [r7, #31]
 80029d6:	e000      	b.n	80029da <HAL_SPI_Transmit+0x25e>
  }

error:
 80029d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a04:	f7fe fb78 	bl	80010f8 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a14:	f7fe fb70 	bl	80010f8 <HAL_GetTick>
 8002a18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a1a:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	015b      	lsls	r3, r3, #5
 8002a20:	0d1b      	lsrs	r3, r3, #20
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a2a:	e054      	b.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d050      	beq.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a34:	f7fe fb60 	bl	80010f8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d902      	bls.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d13d      	bne.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a62:	d111      	bne.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6c:	d004      	beq.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a76:	d107      	bne.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a90:	d10f      	bne.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e017      	b.n	8002af6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d19b      	bne.n	8002a2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <SPI_EndRxTxTransaction+0x7c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <SPI_EndRxTxTransaction+0x80>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0d5b      	lsrs	r3, r3, #21
 8002b1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2e:	d112      	bne.n	8002b56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff ff5a 	bl	80029f4 <SPI_WaitFlagStateUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e00f      	b.n	8002b76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d0f2      	beq.n	8002b56 <SPI_EndRxTxTransaction+0x52>
 8002b70:	e000      	b.n	8002b74 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b72:	bf00      	nop
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000
 8002b84:	165e9f81 	.word	0x165e9f81

08002b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e03f      	b.n	8002c1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe f98e 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	; 0x24
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f829 	bl	8002c24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b0c0      	sub	sp, #256	; 0x100
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	68d9      	ldr	r1, [r3, #12]
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	ea40 0301 	orr.w	r3, r0, r1
 8002c4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c7c:	f021 010c 	bic.w	r1, r1, #12
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9e:	6999      	ldr	r1, [r3, #24]
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	ea40 0301 	orr.w	r3, r0, r1
 8002caa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b8f      	ldr	r3, [pc, #572]	; (8002ef0 <UART_SetConfig+0x2cc>)
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d005      	beq.n	8002cc4 <UART_SetConfig+0xa0>
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b8d      	ldr	r3, [pc, #564]	; (8002ef4 <UART_SetConfig+0x2d0>)
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d104      	bne.n	8002cce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cc4:	f7ff f968 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002cc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ccc:	e003      	b.n	8002cd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cce:	f7ff f94f 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8002cd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce0:	f040 810c 	bne.w	8002efc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	1891      	adds	r1, r2, r2
 8002cfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cfe:	415b      	adcs	r3, r3
 8002d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d06:	4621      	mov	r1, r4
 8002d08:	eb12 0801 	adds.w	r8, r2, r1
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	eb43 0901 	adc.w	r9, r3, r1
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d26:	4690      	mov	r8, r2
 8002d28:	4699      	mov	r9, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	eb18 0303 	adds.w	r3, r8, r3
 8002d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d34:	462b      	mov	r3, r5
 8002d36:	eb49 0303 	adc.w	r3, r9, r3
 8002d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d52:	460b      	mov	r3, r1
 8002d54:	18db      	adds	r3, r3, r3
 8002d56:	653b      	str	r3, [r7, #80]	; 0x50
 8002d58:	4613      	mov	r3, r2
 8002d5a:	eb42 0303 	adc.w	r3, r2, r3
 8002d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d68:	f7fd fa34 	bl	80001d4 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <UART_SetConfig+0x2d4>)
 8002d72:	fba3 2302 	umull	r2, r3, r3, r2
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	011c      	lsls	r4, r3, #4
 8002d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	1891      	adds	r1, r2, r2
 8002d92:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d94:	415b      	adcs	r3, r3
 8002d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002da2:	4649      	mov	r1, r9
 8002da4:	eb43 0b01 	adc.w	fp, r3, r1
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002db4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dbc:	4692      	mov	sl, r2
 8002dbe:	469b      	mov	fp, r3
 8002dc0:	4643      	mov	r3, r8
 8002dc2:	eb1a 0303 	adds.w	r3, sl, r3
 8002dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	eb4b 0303 	adc.w	r3, fp, r3
 8002dd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002de0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002de4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002de8:	460b      	mov	r3, r1
 8002dea:	18db      	adds	r3, r3, r3
 8002dec:	643b      	str	r3, [r7, #64]	; 0x40
 8002dee:	4613      	mov	r3, r2
 8002df0:	eb42 0303 	adc.w	r3, r2, r3
 8002df4:	647b      	str	r3, [r7, #68]	; 0x44
 8002df6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dfe:	f7fd f9e9 	bl	80001d4 <__aeabi_uldivmod>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <UART_SetConfig+0x2d4>)
 8002e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2264      	movs	r2, #100	; 0x64
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	1acb      	subs	r3, r1, r3
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <UART_SetConfig+0x2d4>)
 8002e20:	fba3 2302 	umull	r2, r3, r3, r2
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e2c:	441c      	add	r4, r3
 8002e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e40:	4642      	mov	r2, r8
 8002e42:	464b      	mov	r3, r9
 8002e44:	1891      	adds	r1, r2, r2
 8002e46:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e48:	415b      	adcs	r3, r3
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e50:	4641      	mov	r1, r8
 8002e52:	1851      	adds	r1, r2, r1
 8002e54:	6339      	str	r1, [r7, #48]	; 0x30
 8002e56:	4649      	mov	r1, r9
 8002e58:	414b      	adcs	r3, r1
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e68:	4659      	mov	r1, fp
 8002e6a:	00cb      	lsls	r3, r1, #3
 8002e6c:	4651      	mov	r1, sl
 8002e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e72:	4651      	mov	r1, sl
 8002e74:	00ca      	lsls	r2, r1, #3
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	189b      	adds	r3, r3, r2
 8002e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e84:	464b      	mov	r3, r9
 8002e86:	460a      	mov	r2, r1
 8002e88:	eb42 0303 	adc.w	r3, r2, r3
 8002e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ea0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	18db      	adds	r3, r3, r3
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eaa:	4613      	mov	r3, r2
 8002eac:	eb42 0303 	adc.w	r3, r2, r3
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eba:	f7fd f98b 	bl	80001d4 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <UART_SetConfig+0x2d4>)
 8002ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	2164      	movs	r1, #100	; 0x64
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	3332      	adds	r3, #50	; 0x32
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <UART_SetConfig+0x2d4>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	f003 0207 	and.w	r2, r3, #7
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4422      	add	r2, r4
 8002eea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eec:	e105      	b.n	80030fa <UART_SetConfig+0x4d6>
 8002eee:	bf00      	nop
 8002ef0:	40011000 	.word	0x40011000
 8002ef4:	40011400 	.word	0x40011400
 8002ef8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f00:	2200      	movs	r2, #0
 8002f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f0e:	4642      	mov	r2, r8
 8002f10:	464b      	mov	r3, r9
 8002f12:	1891      	adds	r1, r2, r2
 8002f14:	6239      	str	r1, [r7, #32]
 8002f16:	415b      	adcs	r3, r3
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f1e:	4641      	mov	r1, r8
 8002f20:	1854      	adds	r4, r2, r1
 8002f22:	4649      	mov	r1, r9
 8002f24:	eb43 0501 	adc.w	r5, r3, r1
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	00eb      	lsls	r3, r5, #3
 8002f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f36:	00e2      	lsls	r2, r4, #3
 8002f38:	4614      	mov	r4, r2
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	4643      	mov	r3, r8
 8002f3e:	18e3      	adds	r3, r4, r3
 8002f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f44:	464b      	mov	r3, r9
 8002f46:	eb45 0303 	adc.w	r3, r5, r3
 8002f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	008b      	lsls	r3, r1, #2
 8002f6e:	4621      	mov	r1, r4
 8002f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f74:	4621      	mov	r1, r4
 8002f76:	008a      	lsls	r2, r1, #2
 8002f78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f7c:	f7fd f92a 	bl	80001d4 <__aeabi_uldivmod>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4b60      	ldr	r3, [pc, #384]	; (8003108 <UART_SetConfig+0x4e4>)
 8002f86:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	011c      	lsls	r4, r3, #4
 8002f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	1891      	adds	r1, r2, r2
 8002fa6:	61b9      	str	r1, [r7, #24]
 8002fa8:	415b      	adcs	r3, r3
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	1851      	adds	r1, r2, r1
 8002fb4:	6139      	str	r1, [r7, #16]
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	414b      	adcs	r3, r1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc8:	4659      	mov	r1, fp
 8002fca:	00cb      	lsls	r3, r1, #3
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	00ca      	lsls	r2, r1, #3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4642      	mov	r2, r8
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	eb42 0303 	adc.w	r3, r2, r3
 8002fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ffa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003008:	4649      	mov	r1, r9
 800300a:	008b      	lsls	r3, r1, #2
 800300c:	4641      	mov	r1, r8
 800300e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003012:	4641      	mov	r1, r8
 8003014:	008a      	lsls	r2, r1, #2
 8003016:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800301a:	f7fd f8db 	bl	80001d4 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4b39      	ldr	r3, [pc, #228]	; (8003108 <UART_SetConfig+0x4e4>)
 8003024:	fba3 1302 	umull	r1, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	2164      	movs	r1, #100	; 0x64
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	3332      	adds	r3, #50	; 0x32
 8003036:	4a34      	ldr	r2, [pc, #208]	; (8003108 <UART_SetConfig+0x4e4>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003042:	441c      	add	r4, r3
 8003044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003048:	2200      	movs	r2, #0
 800304a:	673b      	str	r3, [r7, #112]	; 0x70
 800304c:	677a      	str	r2, [r7, #116]	; 0x74
 800304e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003052:	4642      	mov	r2, r8
 8003054:	464b      	mov	r3, r9
 8003056:	1891      	adds	r1, r2, r2
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	415b      	adcs	r3, r3
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003062:	4641      	mov	r1, r8
 8003064:	1851      	adds	r1, r2, r1
 8003066:	6039      	str	r1, [r7, #0]
 8003068:	4649      	mov	r1, r9
 800306a:	414b      	adcs	r3, r1
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800307a:	4659      	mov	r1, fp
 800307c:	00cb      	lsls	r3, r1, #3
 800307e:	4651      	mov	r1, sl
 8003080:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003084:	4651      	mov	r1, sl
 8003086:	00ca      	lsls	r2, r1, #3
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	4603      	mov	r3, r0
 800308e:	4642      	mov	r2, r8
 8003090:	189b      	adds	r3, r3, r2
 8003092:	66bb      	str	r3, [r7, #104]	; 0x68
 8003094:	464b      	mov	r3, r9
 8003096:	460a      	mov	r2, r1
 8003098:	eb42 0303 	adc.w	r3, r2, r3
 800309c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	663b      	str	r3, [r7, #96]	; 0x60
 80030a8:	667a      	str	r2, [r7, #100]	; 0x64
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030b6:	4649      	mov	r1, r9
 80030b8:	008b      	lsls	r3, r1, #2
 80030ba:	4641      	mov	r1, r8
 80030bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030c0:	4641      	mov	r1, r8
 80030c2:	008a      	lsls	r2, r1, #2
 80030c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030c8:	f7fd f884 	bl	80001d4 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <UART_SetConfig+0x4e4>)
 80030d2:	fba3 1302 	umull	r1, r3, r3, r2
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2164      	movs	r1, #100	; 0x64
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	3332      	adds	r3, #50	; 0x32
 80030e4:	4a08      	ldr	r2, [pc, #32]	; (8003108 <UART_SetConfig+0x4e4>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	f003 020f 	and.w	r2, r3, #15
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4422      	add	r2, r4
 80030f8:	609a      	str	r2, [r3, #8]
}
 80030fa:	bf00      	nop
 80030fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003106:	bf00      	nop
 8003108:	51eb851f 	.word	0x51eb851f

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4d0d      	ldr	r5, [pc, #52]	; (8003144 <__libc_init_array+0x38>)
 8003110:	4c0d      	ldr	r4, [pc, #52]	; (8003148 <__libc_init_array+0x3c>)
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	2600      	movs	r6, #0
 8003118:	42a6      	cmp	r6, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	4d0b      	ldr	r5, [pc, #44]	; (800314c <__libc_init_array+0x40>)
 800311e:	4c0c      	ldr	r4, [pc, #48]	; (8003150 <__libc_init_array+0x44>)
 8003120:	f000 f820 	bl	8003164 <_init>
 8003124:	1b64      	subs	r4, r4, r5
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	2600      	movs	r6, #0
 800312a:	42a6      	cmp	r6, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	f855 3b04 	ldr.w	r3, [r5], #4
 8003134:	4798      	blx	r3
 8003136:	3601      	adds	r6, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	f855 3b04 	ldr.w	r3, [r5], #4
 800313e:	4798      	blx	r3
 8003140:	3601      	adds	r6, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	080031bc 	.word	0x080031bc
 8003148:	080031bc 	.word	0x080031bc
 800314c:	080031bc 	.word	0x080031bc
 8003150:	080031c0 	.word	0x080031c0

08003154 <memset>:
 8003154:	4402      	add	r2, r0
 8003156:	4603      	mov	r3, r0
 8003158:	4293      	cmp	r3, r2
 800315a:	d100      	bne.n	800315e <memset+0xa>
 800315c:	4770      	bx	lr
 800315e:	f803 1b01 	strb.w	r1, [r3], #1
 8003162:	e7f9      	b.n	8003158 <memset+0x4>

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
