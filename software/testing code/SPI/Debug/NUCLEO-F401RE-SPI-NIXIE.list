
NUCLEO-F401RE-SPI-NIXIE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f0  080038f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038f8  080038f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000074  08003974  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003974  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f41  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fd  00000000  00000000  00028fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159e2  00000000  00000000  0002b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d7a  00000000  00000000  00041062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086787  00000000  00000000  00049ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0563  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002450  00000000  00000000  000d05b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003880 	.word	0x08003880

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003880 	.word	0x08003880

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f001 f80f 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 fd77 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fe41 	bl	800120c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 fe15 	bl	80011b8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800058e:	f000 fddd 	bl	800114c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Default CS pin to high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	48c1      	ldr	r0, [pc, #772]	; (800089c <main+0x324>)
 8000598:	f001 fb02 	bl	8001ba0 <HAL_GPIO_WritePin>

  //print a test to serial monitor to make sure everything is working
  uart_buf_len = sprintf(uart_buf, "SPI TEST\r\n");
 800059c:	463b      	mov	r3, r7
 800059e:	49c0      	ldr	r1, [pc, #768]	; (80008a0 <main+0x328>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fd3f 	bl	8003024 <siprintf>
 80005a6:	6378      	str	r0, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80005a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4639      	mov	r1, r7
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	48bc      	ldr	r0, [pc, #752]	; (80008a4 <main+0x32c>)
 80005b2:	f002 fa60 	bl	8002a76 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	48b8      	ldr	r0, [pc, #736]	; (800089c <main+0x324>)
 80005bc:	f001 faf0 	bl	8001ba0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	2201      	movs	r2, #1
 80005c4:	49b8      	ldr	r1, [pc, #736]	; (80008a8 <main+0x330>)
 80005c6:	48b9      	ldr	r0, [pc, #740]	; (80008ac <main+0x334>)
 80005c8:	f002 f801 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2201      	movs	r2, #1
 80005d0:	49b7      	ldr	r1, [pc, #732]	; (80008b0 <main+0x338>)
 80005d2:	48b6      	ldr	r0, [pc, #728]	; (80008ac <main+0x334>)
 80005d4:	f001 fffb 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	2201      	movs	r2, #1
 80005dc:	49b4      	ldr	r1, [pc, #720]	; (80008b0 <main+0x338>)
 80005de:	48b3      	ldr	r0, [pc, #716]	; (80008ac <main+0x334>)
 80005e0:	f001 fff5 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	2201      	movs	r2, #1
 80005e8:	49b1      	ldr	r1, [pc, #708]	; (80008b0 <main+0x338>)
 80005ea:	48b0      	ldr	r0, [pc, #704]	; (80008ac <main+0x334>)
 80005ec:	f001 ffef 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	2201      	movs	r2, #1
 80005f4:	49ae      	ldr	r1, [pc, #696]	; (80008b0 <main+0x338>)
 80005f6:	48ad      	ldr	r0, [pc, #692]	; (80008ac <main+0x334>)
 80005f8:	f001 ffe9 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	2201      	movs	r2, #1
 8000600:	49ab      	ldr	r1, [pc, #684]	; (80008b0 <main+0x338>)
 8000602:	48aa      	ldr	r0, [pc, #680]	; (80008ac <main+0x334>)
 8000604:	f001 ffe3 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2201      	movs	r2, #1
 800060c:	49a8      	ldr	r1, [pc, #672]	; (80008b0 <main+0x338>)
 800060e:	48a7      	ldr	r0, [pc, #668]	; (80008ac <main+0x334>)
 8000610:	f001 ffdd 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	2201      	movs	r2, #1
 8000618:	49a5      	ldr	r1, [pc, #660]	; (80008b0 <main+0x338>)
 800061a:	48a4      	ldr	r0, [pc, #656]	; (80008ac <main+0x334>)
 800061c:	f001 ffd7 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	2201      	movs	r2, #1
 8000624:	49a2      	ldr	r1, [pc, #648]	; (80008b0 <main+0x338>)
 8000626:	48a1      	ldr	r0, [pc, #644]	; (80008ac <main+0x334>)
 8000628:	f001 ffd1 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	2201      	movs	r2, #1
 8000630:	499f      	ldr	r1, [pc, #636]	; (80008b0 <main+0x338>)
 8000632:	489e      	ldr	r0, [pc, #632]	; (80008ac <main+0x334>)
 8000634:	f001 ffcb 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000638:	2364      	movs	r3, #100	; 0x64
 800063a:	2201      	movs	r2, #1
 800063c:	499c      	ldr	r1, [pc, #624]	; (80008b0 <main+0x338>)
 800063e:	489b      	ldr	r0, [pc, #620]	; (80008ac <main+0x334>)
 8000640:	f001 ffc5 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000644:	2364      	movs	r3, #100	; 0x64
 8000646:	2201      	movs	r2, #1
 8000648:	4999      	ldr	r1, [pc, #612]	; (80008b0 <main+0x338>)
 800064a:	4898      	ldr	r0, [pc, #608]	; (80008ac <main+0x334>)
 800064c:	f001 ffbf 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	2201      	movs	r2, #1
 8000654:	4996      	ldr	r1, [pc, #600]	; (80008b0 <main+0x338>)
 8000656:	4895      	ldr	r0, [pc, #596]	; (80008ac <main+0x334>)
 8000658:	f001 ffb9 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2201      	movs	r2, #1
 8000660:	4993      	ldr	r1, [pc, #588]	; (80008b0 <main+0x338>)
 8000662:	4892      	ldr	r0, [pc, #584]	; (80008ac <main+0x334>)
 8000664:	f001 ffb3 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000668:	2364      	movs	r3, #100	; 0x64
 800066a:	2201      	movs	r2, #1
 800066c:	4990      	ldr	r1, [pc, #576]	; (80008b0 <main+0x338>)
 800066e:	488f      	ldr	r0, [pc, #572]	; (80008ac <main+0x334>)
 8000670:	f001 ffad 	bl	80025ce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	2201      	movs	r2, #1
 8000678:	498d      	ldr	r1, [pc, #564]	; (80008b0 <main+0x338>)
 800067a:	488c      	ldr	r0, [pc, #560]	; (80008ac <main+0x334>)
 800067c:	f001 ffa7 	bl	80025ce <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	4885      	ldr	r0, [pc, #532]	; (800089c <main+0x324>)
 8000686:	f001 fa8b 	bl	8001ba0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	//none
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4883      	ldr	r0, [pc, #524]	; (800089c <main+0x324>)
 8000690:	f001 fa86 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	2201      	movs	r2, #1
 8000698:	4983      	ldr	r1, [pc, #524]	; (80008a8 <main+0x330>)
 800069a:	4884      	ldr	r0, [pc, #528]	; (80008ac <main+0x334>)
 800069c:	f001 ff97 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2201      	movs	r2, #1
 80006a4:	4982      	ldr	r1, [pc, #520]	; (80008b0 <main+0x338>)
 80006a6:	4881      	ldr	r0, [pc, #516]	; (80008ac <main+0x334>)
 80006a8:	f001 ff91 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	2201      	movs	r2, #1
 80006b0:	497f      	ldr	r1, [pc, #508]	; (80008b0 <main+0x338>)
 80006b2:	487e      	ldr	r0, [pc, #504]	; (80008ac <main+0x334>)
 80006b4:	f001 ff8b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	2201      	movs	r2, #1
 80006bc:	497c      	ldr	r1, [pc, #496]	; (80008b0 <main+0x338>)
 80006be:	487b      	ldr	r0, [pc, #492]	; (80008ac <main+0x334>)
 80006c0:	f001 ff85 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80006c4:	2364      	movs	r3, #100	; 0x64
 80006c6:	2201      	movs	r2, #1
 80006c8:	4979      	ldr	r1, [pc, #484]	; (80008b0 <main+0x338>)
 80006ca:	4878      	ldr	r0, [pc, #480]	; (80008ac <main+0x334>)
 80006cc:	f001 ff7f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	2201      	movs	r2, #1
 80006d4:	4976      	ldr	r1, [pc, #472]	; (80008b0 <main+0x338>)
 80006d6:	4875      	ldr	r0, [pc, #468]	; (80008ac <main+0x334>)
 80006d8:	f001 ff79 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80006dc:	2364      	movs	r3, #100	; 0x64
 80006de:	2201      	movs	r2, #1
 80006e0:	4973      	ldr	r1, [pc, #460]	; (80008b0 <main+0x338>)
 80006e2:	4872      	ldr	r0, [pc, #456]	; (80008ac <main+0x334>)
 80006e4:	f001 ff73 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4970      	ldr	r1, [pc, #448]	; (80008b0 <main+0x338>)
 80006ee:	486f      	ldr	r0, [pc, #444]	; (80008ac <main+0x334>)
 80006f0:	f001 ff6d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	2201      	movs	r2, #1
 80006f8:	496d      	ldr	r1, [pc, #436]	; (80008b0 <main+0x338>)
 80006fa:	486c      	ldr	r0, [pc, #432]	; (80008ac <main+0x334>)
 80006fc:	f001 ff67 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	496a      	ldr	r1, [pc, #424]	; (80008b0 <main+0x338>)
 8000706:	4869      	ldr	r0, [pc, #420]	; (80008ac <main+0x334>)
 8000708:	f001 ff61 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2201      	movs	r2, #1
 8000710:	4967      	ldr	r1, [pc, #412]	; (80008b0 <main+0x338>)
 8000712:	4866      	ldr	r0, [pc, #408]	; (80008ac <main+0x334>)
 8000714:	f001 ff5b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2201      	movs	r2, #1
 800071c:	4964      	ldr	r1, [pc, #400]	; (80008b0 <main+0x338>)
 800071e:	4863      	ldr	r0, [pc, #396]	; (80008ac <main+0x334>)
 8000720:	f001 ff55 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	2201      	movs	r2, #1
 8000728:	4961      	ldr	r1, [pc, #388]	; (80008b0 <main+0x338>)
 800072a:	4860      	ldr	r0, [pc, #384]	; (80008ac <main+0x334>)
 800072c:	f001 ff4f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	2201      	movs	r2, #1
 8000734:	495e      	ldr	r1, [pc, #376]	; (80008b0 <main+0x338>)
 8000736:	485d      	ldr	r0, [pc, #372]	; (80008ac <main+0x334>)
 8000738:	f001 ff49 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2201      	movs	r2, #1
 8000740:	495c      	ldr	r1, [pc, #368]	; (80008b4 <main+0x33c>)
 8000742:	485a      	ldr	r0, [pc, #360]	; (80008ac <main+0x334>)
 8000744:	f001 ff43 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	2201      	movs	r2, #1
 800074c:	4958      	ldr	r1, [pc, #352]	; (80008b0 <main+0x338>)
 800074e:	4857      	ldr	r0, [pc, #348]	; (80008ac <main+0x334>)
 8000750:	f001 ff3d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	4850      	ldr	r0, [pc, #320]	; (800089c <main+0x324>)
 800075a:	f001 fa21 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000762:	f000 ff8f 	bl	8001684 <HAL_Delay>

  	//0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	484c      	ldr	r0, [pc, #304]	; (800089c <main+0x324>)
 800076c:	f001 fa18 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	2201      	movs	r2, #1
 8000774:	494c      	ldr	r1, [pc, #304]	; (80008a8 <main+0x330>)
 8000776:	484d      	ldr	r0, [pc, #308]	; (80008ac <main+0x334>)
 8000778:	f001 ff29 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 800077c:	2364      	movs	r3, #100	; 0x64
 800077e:	2201      	movs	r2, #1
 8000780:	494b      	ldr	r1, [pc, #300]	; (80008b0 <main+0x338>)
 8000782:	484a      	ldr	r0, [pc, #296]	; (80008ac <main+0x334>)
 8000784:	f001 ff23 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2201      	movs	r2, #1
 800078c:	4948      	ldr	r1, [pc, #288]	; (80008b0 <main+0x338>)
 800078e:	4847      	ldr	r0, [pc, #284]	; (80008ac <main+0x334>)
 8000790:	f001 ff1d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	2201      	movs	r2, #1
 8000798:	4945      	ldr	r1, [pc, #276]	; (80008b0 <main+0x338>)
 800079a:	4844      	ldr	r0, [pc, #272]	; (80008ac <main+0x334>)
 800079c:	f001 ff17 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2201      	movs	r2, #1
 80007a4:	4942      	ldr	r1, [pc, #264]	; (80008b0 <main+0x338>)
 80007a6:	4841      	ldr	r0, [pc, #260]	; (80008ac <main+0x334>)
 80007a8:	f001 ff11 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	2201      	movs	r2, #1
 80007b0:	493f      	ldr	r1, [pc, #252]	; (80008b0 <main+0x338>)
 80007b2:	483e      	ldr	r0, [pc, #248]	; (80008ac <main+0x334>)
 80007b4:	f001 ff0b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	2201      	movs	r2, #1
 80007bc:	493c      	ldr	r1, [pc, #240]	; (80008b0 <main+0x338>)
 80007be:	483b      	ldr	r0, [pc, #236]	; (80008ac <main+0x334>)
 80007c0:	f001 ff05 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	2201      	movs	r2, #1
 80007c8:	4939      	ldr	r1, [pc, #228]	; (80008b0 <main+0x338>)
 80007ca:	4838      	ldr	r0, [pc, #224]	; (80008ac <main+0x334>)
 80007cc:	f001 feff 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	2201      	movs	r2, #1
 80007d4:	4936      	ldr	r1, [pc, #216]	; (80008b0 <main+0x338>)
 80007d6:	4835      	ldr	r0, [pc, #212]	; (80008ac <main+0x334>)
 80007d8:	f001 fef9 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80007dc:	2364      	movs	r3, #100	; 0x64
 80007de:	2201      	movs	r2, #1
 80007e0:	4933      	ldr	r1, [pc, #204]	; (80008b0 <main+0x338>)
 80007e2:	4832      	ldr	r0, [pc, #200]	; (80008ac <main+0x334>)
 80007e4:	f001 fef3 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	2201      	movs	r2, #1
 80007ec:	4932      	ldr	r1, [pc, #200]	; (80008b8 <main+0x340>)
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <main+0x334>)
 80007f0:	f001 feed 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	2201      	movs	r2, #1
 80007f8:	492d      	ldr	r1, [pc, #180]	; (80008b0 <main+0x338>)
 80007fa:	482c      	ldr	r0, [pc, #176]	; (80008ac <main+0x334>)
 80007fc:	f001 fee7 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	2201      	movs	r2, #1
 8000804:	492a      	ldr	r1, [pc, #168]	; (80008b0 <main+0x338>)
 8000806:	4829      	ldr	r0, [pc, #164]	; (80008ac <main+0x334>)
 8000808:	f001 fee1 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	2201      	movs	r2, #1
 8000810:	4927      	ldr	r1, [pc, #156]	; (80008b0 <main+0x338>)
 8000812:	4826      	ldr	r0, [pc, #152]	; (80008ac <main+0x334>)
 8000814:	f001 fedb 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	4925      	ldr	r1, [pc, #148]	; (80008b4 <main+0x33c>)
 800081e:	4823      	ldr	r0, [pc, #140]	; (80008ac <main+0x334>)
 8000820:	f001 fed5 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	2201      	movs	r2, #1
 8000828:	4921      	ldr	r1, [pc, #132]	; (80008b0 <main+0x338>)
 800082a:	4820      	ldr	r0, [pc, #128]	; (80008ac <main+0x334>)
 800082c:	f001 fecf 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2140      	movs	r1, #64	; 0x40
 8000834:	4819      	ldr	r0, [pc, #100]	; (800089c <main+0x324>)
 8000836:	f001 f9b3 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800083a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083e:	f000 ff21 	bl	8001684 <HAL_Delay>

  	//1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	4815      	ldr	r0, [pc, #84]	; (800089c <main+0x324>)
 8000848:	f001 f9aa 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	2201      	movs	r2, #1
 8000850:	4915      	ldr	r1, [pc, #84]	; (80008a8 <main+0x330>)
 8000852:	4816      	ldr	r0, [pc, #88]	; (80008ac <main+0x334>)
 8000854:	f001 febb 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000858:	2364      	movs	r3, #100	; 0x64
 800085a:	2201      	movs	r2, #1
 800085c:	4916      	ldr	r1, [pc, #88]	; (80008b8 <main+0x340>)
 800085e:	4813      	ldr	r0, [pc, #76]	; (80008ac <main+0x334>)
 8000860:	f001 feb5 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	4911      	ldr	r1, [pc, #68]	; (80008b0 <main+0x338>)
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <main+0x334>)
 800086c:	f001 feaf 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000870:	2364      	movs	r3, #100	; 0x64
 8000872:	2201      	movs	r2, #1
 8000874:	490e      	ldr	r1, [pc, #56]	; (80008b0 <main+0x338>)
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <main+0x334>)
 8000878:	f001 fea9 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 800087c:	2364      	movs	r3, #100	; 0x64
 800087e:	2201      	movs	r2, #1
 8000880:	490b      	ldr	r1, [pc, #44]	; (80008b0 <main+0x338>)
 8000882:	480a      	ldr	r0, [pc, #40]	; (80008ac <main+0x334>)
 8000884:	f001 fea3 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	2201      	movs	r2, #1
 800088c:	4908      	ldr	r1, [pc, #32]	; (80008b0 <main+0x338>)
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <main+0x334>)
 8000890:	f001 fe9d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	2201      	movs	r2, #1
 8000898:	e010      	b.n	80008bc <main+0x344>
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400
 80008a0:	08003898 	.word	0x08003898
 80008a4:	200000f4 	.word	0x200000f4
 80008a8:	20000000 	.word	0x20000000
 80008ac:	2000009c 	.word	0x2000009c
 80008b0:	20000003 	.word	0x20000003
 80008b4:	20000001 	.word	0x20000001
 80008b8:	20000002 	.word	0x20000002
 80008bc:	49c0      	ldr	r1, [pc, #768]	; (8000bc0 <main+0x648>)
 80008be:	48c1      	ldr	r0, [pc, #772]	; (8000bc4 <main+0x64c>)
 80008c0:	f001 fe85 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80008c4:	2364      	movs	r3, #100	; 0x64
 80008c6:	2201      	movs	r2, #1
 80008c8:	49bd      	ldr	r1, [pc, #756]	; (8000bc0 <main+0x648>)
 80008ca:	48be      	ldr	r0, [pc, #760]	; (8000bc4 <main+0x64c>)
 80008cc:	f001 fe7f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80008d0:	2364      	movs	r3, #100	; 0x64
 80008d2:	2201      	movs	r2, #1
 80008d4:	49ba      	ldr	r1, [pc, #744]	; (8000bc0 <main+0x648>)
 80008d6:	48bb      	ldr	r0, [pc, #748]	; (8000bc4 <main+0x64c>)
 80008d8:	f001 fe79 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	49b7      	ldr	r1, [pc, #732]	; (8000bc0 <main+0x648>)
 80008e2:	48b8      	ldr	r0, [pc, #736]	; (8000bc4 <main+0x64c>)
 80008e4:	f001 fe73 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	2201      	movs	r2, #1
 80008ec:	49b4      	ldr	r1, [pc, #720]	; (8000bc0 <main+0x648>)
 80008ee:	48b5      	ldr	r0, [pc, #724]	; (8000bc4 <main+0x64c>)
 80008f0:	f001 fe6d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80008f4:	2364      	movs	r3, #100	; 0x64
 80008f6:	2201      	movs	r2, #1
 80008f8:	49b1      	ldr	r1, [pc, #708]	; (8000bc0 <main+0x648>)
 80008fa:	48b2      	ldr	r0, [pc, #712]	; (8000bc4 <main+0x64c>)
 80008fc:	f001 fe67 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	2201      	movs	r2, #1
 8000904:	49ae      	ldr	r1, [pc, #696]	; (8000bc0 <main+0x648>)
 8000906:	48af      	ldr	r0, [pc, #700]	; (8000bc4 <main+0x64c>)
 8000908:	f001 fe61 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 800090c:	2364      	movs	r3, #100	; 0x64
 800090e:	2201      	movs	r2, #1
 8000910:	49ab      	ldr	r1, [pc, #684]	; (8000bc0 <main+0x648>)
 8000912:	48ac      	ldr	r0, [pc, #688]	; (8000bc4 <main+0x64c>)
 8000914:	f001 fe5b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 8000918:	2364      	movs	r3, #100	; 0x64
 800091a:	2201      	movs	r2, #1
 800091c:	49aa      	ldr	r1, [pc, #680]	; (8000bc8 <main+0x650>)
 800091e:	48a9      	ldr	r0, [pc, #676]	; (8000bc4 <main+0x64c>)
 8000920:	f001 fe55 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	2201      	movs	r2, #1
 8000928:	49a5      	ldr	r1, [pc, #660]	; (8000bc0 <main+0x648>)
 800092a:	48a6      	ldr	r0, [pc, #664]	; (8000bc4 <main+0x64c>)
 800092c:	f001 fe4f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	48a5      	ldr	r0, [pc, #660]	; (8000bcc <main+0x654>)
 8000936:	f001 f933 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800093a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093e:	f000 fea1 	bl	8001684 <HAL_Delay>

  	//2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	48a1      	ldr	r0, [pc, #644]	; (8000bcc <main+0x654>)
 8000948:	f001 f92a 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2201      	movs	r2, #1
 8000950:	499f      	ldr	r1, [pc, #636]	; (8000bd0 <main+0x658>)
 8000952:	489c      	ldr	r0, [pc, #624]	; (8000bc4 <main+0x64c>)
 8000954:	f001 fe3b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	2201      	movs	r2, #1
 800095c:	4998      	ldr	r1, [pc, #608]	; (8000bc0 <main+0x648>)
 800095e:	4899      	ldr	r0, [pc, #612]	; (8000bc4 <main+0x64c>)
 8000960:	f001 fe35 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	2201      	movs	r2, #1
 8000968:	499a      	ldr	r1, [pc, #616]	; (8000bd4 <main+0x65c>)
 800096a:	4896      	ldr	r0, [pc, #600]	; (8000bc4 <main+0x64c>)
 800096c:	f001 fe2f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	2201      	movs	r2, #1
 8000974:	4992      	ldr	r1, [pc, #584]	; (8000bc0 <main+0x648>)
 8000976:	4893      	ldr	r0, [pc, #588]	; (8000bc4 <main+0x64c>)
 8000978:	f001 fe29 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	2201      	movs	r2, #1
 8000980:	498f      	ldr	r1, [pc, #572]	; (8000bc0 <main+0x648>)
 8000982:	4890      	ldr	r0, [pc, #576]	; (8000bc4 <main+0x64c>)
 8000984:	f001 fe23 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	2201      	movs	r2, #1
 800098c:	498c      	ldr	r1, [pc, #560]	; (8000bc0 <main+0x648>)
 800098e:	488d      	ldr	r0, [pc, #564]	; (8000bc4 <main+0x64c>)
 8000990:	f001 fe1d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	2201      	movs	r2, #1
 8000998:	4989      	ldr	r1, [pc, #548]	; (8000bc0 <main+0x648>)
 800099a:	488a      	ldr	r0, [pc, #552]	; (8000bc4 <main+0x64c>)
 800099c:	f001 fe17 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	2201      	movs	r2, #1
 80009a4:	4986      	ldr	r1, [pc, #536]	; (8000bc0 <main+0x648>)
 80009a6:	4887      	ldr	r0, [pc, #540]	; (8000bc4 <main+0x64c>)
 80009a8:	f001 fe11 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	2201      	movs	r2, #1
 80009b0:	4983      	ldr	r1, [pc, #524]	; (8000bc0 <main+0x648>)
 80009b2:	4884      	ldr	r0, [pc, #528]	; (8000bc4 <main+0x64c>)
 80009b4:	f001 fe0b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80009b8:	2364      	movs	r3, #100	; 0x64
 80009ba:	2201      	movs	r2, #1
 80009bc:	4980      	ldr	r1, [pc, #512]	; (8000bc0 <main+0x648>)
 80009be:	4881      	ldr	r0, [pc, #516]	; (8000bc4 <main+0x64c>)
 80009c0:	f001 fe05 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	2201      	movs	r2, #1
 80009c8:	497d      	ldr	r1, [pc, #500]	; (8000bc0 <main+0x648>)
 80009ca:	487e      	ldr	r0, [pc, #504]	; (8000bc4 <main+0x64c>)
 80009cc:	f001 fdff 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	2201      	movs	r2, #1
 80009d4:	497a      	ldr	r1, [pc, #488]	; (8000bc0 <main+0x648>)
 80009d6:	487b      	ldr	r0, [pc, #492]	; (8000bc4 <main+0x64c>)
 80009d8:	f001 fdf9 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80009dc:	2364      	movs	r3, #100	; 0x64
 80009de:	2201      	movs	r2, #1
 80009e0:	4977      	ldr	r1, [pc, #476]	; (8000bc0 <main+0x648>)
 80009e2:	4878      	ldr	r0, [pc, #480]	; (8000bc4 <main+0x64c>)
 80009e4:	f001 fdf3 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 80009e8:	2364      	movs	r3, #100	; 0x64
 80009ea:	2201      	movs	r2, #1
 80009ec:	4974      	ldr	r1, [pc, #464]	; (8000bc0 <main+0x648>)
 80009ee:	4875      	ldr	r0, [pc, #468]	; (8000bc4 <main+0x64c>)
 80009f0:	f001 fded 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 80009f4:	2364      	movs	r3, #100	; 0x64
 80009f6:	2201      	movs	r2, #1
 80009f8:	4973      	ldr	r1, [pc, #460]	; (8000bc8 <main+0x650>)
 80009fa:	4872      	ldr	r0, [pc, #456]	; (8000bc4 <main+0x64c>)
 80009fc:	f001 fde7 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	2201      	movs	r2, #1
 8000a04:	496e      	ldr	r1, [pc, #440]	; (8000bc0 <main+0x648>)
 8000a06:	486f      	ldr	r0, [pc, #444]	; (8000bc4 <main+0x64c>)
 8000a08:	f001 fde1 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2140      	movs	r1, #64	; 0x40
 8000a10:	486e      	ldr	r0, [pc, #440]	; (8000bcc <main+0x654>)
 8000a12:	f001 f8c5 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1a:	f000 fe33 	bl	8001684 <HAL_Delay>

  	//3
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	486a      	ldr	r0, [pc, #424]	; (8000bcc <main+0x654>)
 8000a24:	f001 f8bc 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4968      	ldr	r1, [pc, #416]	; (8000bd0 <main+0x658>)
 8000a2e:	4865      	ldr	r0, [pc, #404]	; (8000bc4 <main+0x64c>)
 8000a30:	f001 fdcd 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a34:	2364      	movs	r3, #100	; 0x64
 8000a36:	2201      	movs	r2, #1
 8000a38:	4961      	ldr	r1, [pc, #388]	; (8000bc0 <main+0x648>)
 8000a3a:	4862      	ldr	r0, [pc, #392]	; (8000bc4 <main+0x64c>)
 8000a3c:	f001 fdc7 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	2201      	movs	r2, #1
 8000a44:	495e      	ldr	r1, [pc, #376]	; (8000bc0 <main+0x648>)
 8000a46:	485f      	ldr	r0, [pc, #380]	; (8000bc4 <main+0x64c>)
 8000a48:	f001 fdc1 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4960      	ldr	r1, [pc, #384]	; (8000bd4 <main+0x65c>)
 8000a52:	485c      	ldr	r0, [pc, #368]	; (8000bc4 <main+0x64c>)
 8000a54:	f001 fdbb 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4958      	ldr	r1, [pc, #352]	; (8000bc0 <main+0x648>)
 8000a5e:	4859      	ldr	r0, [pc, #356]	; (8000bc4 <main+0x64c>)
 8000a60:	f001 fdb5 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	2201      	movs	r2, #1
 8000a68:	4955      	ldr	r1, [pc, #340]	; (8000bc0 <main+0x648>)
 8000a6a:	4856      	ldr	r0, [pc, #344]	; (8000bc4 <main+0x64c>)
 8000a6c:	f001 fdaf 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a70:	2364      	movs	r3, #100	; 0x64
 8000a72:	2201      	movs	r2, #1
 8000a74:	4952      	ldr	r1, [pc, #328]	; (8000bc0 <main+0x648>)
 8000a76:	4853      	ldr	r0, [pc, #332]	; (8000bc4 <main+0x64c>)
 8000a78:	f001 fda9 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	2201      	movs	r2, #1
 8000a80:	494f      	ldr	r1, [pc, #316]	; (8000bc0 <main+0x648>)
 8000a82:	4850      	ldr	r0, [pc, #320]	; (8000bc4 <main+0x64c>)
 8000a84:	f001 fda3 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	494c      	ldr	r1, [pc, #304]	; (8000bc0 <main+0x648>)
 8000a8e:	484d      	ldr	r0, [pc, #308]	; (8000bc4 <main+0x64c>)
 8000a90:	f001 fd9d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	2201      	movs	r2, #1
 8000a98:	4949      	ldr	r1, [pc, #292]	; (8000bc0 <main+0x648>)
 8000a9a:	484a      	ldr	r0, [pc, #296]	; (8000bc4 <main+0x64c>)
 8000a9c:	f001 fd97 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000aa0:	2364      	movs	r3, #100	; 0x64
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4946      	ldr	r1, [pc, #280]	; (8000bc0 <main+0x648>)
 8000aa6:	4847      	ldr	r0, [pc, #284]	; (8000bc4 <main+0x64c>)
 8000aa8:	f001 fd91 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4943      	ldr	r1, [pc, #268]	; (8000bc0 <main+0x648>)
 8000ab2:	4844      	ldr	r0, [pc, #272]	; (8000bc4 <main+0x64c>)
 8000ab4:	f001 fd8b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000ab8:	2364      	movs	r3, #100	; 0x64
 8000aba:	2201      	movs	r2, #1
 8000abc:	4940      	ldr	r1, [pc, #256]	; (8000bc0 <main+0x648>)
 8000abe:	4841      	ldr	r0, [pc, #260]	; (8000bc4 <main+0x64c>)
 8000ac0:	f001 fd85 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	493d      	ldr	r1, [pc, #244]	; (8000bc0 <main+0x648>)
 8000aca:	483e      	ldr	r0, [pc, #248]	; (8000bc4 <main+0x64c>)
 8000acc:	f001 fd7f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	493c      	ldr	r1, [pc, #240]	; (8000bc8 <main+0x650>)
 8000ad6:	483b      	ldr	r0, [pc, #236]	; (8000bc4 <main+0x64c>)
 8000ad8:	f001 fd79 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000adc:	2364      	movs	r3, #100	; 0x64
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4937      	ldr	r1, [pc, #220]	; (8000bc0 <main+0x648>)
 8000ae2:	4838      	ldr	r0, [pc, #224]	; (8000bc4 <main+0x64c>)
 8000ae4:	f001 fd73 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	4837      	ldr	r0, [pc, #220]	; (8000bcc <main+0x654>)
 8000aee:	f001 f857 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af6:	f000 fdc5 	bl	8001684 <HAL_Delay>

  	//4
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4833      	ldr	r0, [pc, #204]	; (8000bcc <main+0x654>)
 8000b00:	f001 f84e 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	2201      	movs	r2, #1
 8000b08:	4931      	ldr	r1, [pc, #196]	; (8000bd0 <main+0x658>)
 8000b0a:	482e      	ldr	r0, [pc, #184]	; (8000bc4 <main+0x64c>)
 8000b0c:	f001 fd5f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	2201      	movs	r2, #1
 8000b14:	492a      	ldr	r1, [pc, #168]	; (8000bc0 <main+0x648>)
 8000b16:	482b      	ldr	r0, [pc, #172]	; (8000bc4 <main+0x64c>)
 8000b18:	f001 fd59 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4927      	ldr	r1, [pc, #156]	; (8000bc0 <main+0x648>)
 8000b22:	4828      	ldr	r0, [pc, #160]	; (8000bc4 <main+0x64c>)
 8000b24:	f001 fd53 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4924      	ldr	r1, [pc, #144]	; (8000bc0 <main+0x648>)
 8000b2e:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <main+0x64c>)
 8000b30:	f001 fd4d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000b34:	2364      	movs	r3, #100	; 0x64
 8000b36:	2201      	movs	r2, #1
 8000b38:	4926      	ldr	r1, [pc, #152]	; (8000bd4 <main+0x65c>)
 8000b3a:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <main+0x64c>)
 8000b3c:	f001 fd47 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	2201      	movs	r2, #1
 8000b44:	491e      	ldr	r1, [pc, #120]	; (8000bc0 <main+0x648>)
 8000b46:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <main+0x64c>)
 8000b48:	f001 fd41 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	2201      	movs	r2, #1
 8000b50:	491b      	ldr	r1, [pc, #108]	; (8000bc0 <main+0x648>)
 8000b52:	481c      	ldr	r0, [pc, #112]	; (8000bc4 <main+0x64c>)
 8000b54:	f001 fd3b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b58:	2364      	movs	r3, #100	; 0x64
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4918      	ldr	r1, [pc, #96]	; (8000bc0 <main+0x648>)
 8000b5e:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <main+0x64c>)
 8000b60:	f001 fd35 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b64:	2364      	movs	r3, #100	; 0x64
 8000b66:	2201      	movs	r2, #1
 8000b68:	4915      	ldr	r1, [pc, #84]	; (8000bc0 <main+0x648>)
 8000b6a:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <main+0x64c>)
 8000b6c:	f001 fd2f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	2201      	movs	r2, #1
 8000b74:	4912      	ldr	r1, [pc, #72]	; (8000bc0 <main+0x648>)
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <main+0x64c>)
 8000b78:	f001 fd29 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	2201      	movs	r2, #1
 8000b80:	490f      	ldr	r1, [pc, #60]	; (8000bc0 <main+0x648>)
 8000b82:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <main+0x64c>)
 8000b84:	f001 fd23 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <main+0x648>)
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <main+0x64c>)
 8000b90:	f001 fd1d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	2201      	movs	r2, #1
 8000b98:	4909      	ldr	r1, [pc, #36]	; (8000bc0 <main+0x648>)
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <main+0x64c>)
 8000b9c:	f001 fd17 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4906      	ldr	r1, [pc, #24]	; (8000bc0 <main+0x648>)
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <main+0x64c>)
 8000ba8:	f001 fd11 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4905      	ldr	r1, [pc, #20]	; (8000bc8 <main+0x650>)
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <main+0x64c>)
 8000bb4:	f001 fd0b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4900      	ldr	r1, [pc, #0]	; (8000bc0 <main+0x648>)
 8000bbe:	e00b      	b.n	8000bd8 <main+0x660>
 8000bc0:	20000003 	.word	0x20000003
 8000bc4:	2000009c 	.word	0x2000009c
 8000bc8:	20000001 	.word	0x20000001
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000002 	.word	0x20000002
 8000bd8:	48c2      	ldr	r0, [pc, #776]	; (8000ee4 <main+0x96c>)
 8000bda:	f001 fcf8 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	48c1      	ldr	r0, [pc, #772]	; (8000ee8 <main+0x970>)
 8000be4:	f000 ffdc 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bec:	f000 fd4a 	bl	8001684 <HAL_Delay>

  	//5
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	48bc      	ldr	r0, [pc, #752]	; (8000ee8 <main+0x970>)
 8000bf6:	f000 ffd3 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	49bb      	ldr	r1, [pc, #748]	; (8000eec <main+0x974>)
 8000c00:	48b8      	ldr	r0, [pc, #736]	; (8000ee4 <main+0x96c>)
 8000c02:	f001 fce4 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c06:	2364      	movs	r3, #100	; 0x64
 8000c08:	2201      	movs	r2, #1
 8000c0a:	49b9      	ldr	r1, [pc, #740]	; (8000ef0 <main+0x978>)
 8000c0c:	48b5      	ldr	r0, [pc, #724]	; (8000ee4 <main+0x96c>)
 8000c0e:	f001 fcde 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	2201      	movs	r2, #1
 8000c16:	49b6      	ldr	r1, [pc, #728]	; (8000ef0 <main+0x978>)
 8000c18:	48b2      	ldr	r0, [pc, #712]	; (8000ee4 <main+0x96c>)
 8000c1a:	f001 fcd8 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c1e:	2364      	movs	r3, #100	; 0x64
 8000c20:	2201      	movs	r2, #1
 8000c22:	49b3      	ldr	r1, [pc, #716]	; (8000ef0 <main+0x978>)
 8000c24:	48af      	ldr	r0, [pc, #700]	; (8000ee4 <main+0x96c>)
 8000c26:	f001 fcd2 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	49b0      	ldr	r1, [pc, #704]	; (8000ef0 <main+0x978>)
 8000c30:	48ac      	ldr	r0, [pc, #688]	; (8000ee4 <main+0x96c>)
 8000c32:	f001 fccc 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	2201      	movs	r2, #1
 8000c3a:	49ae      	ldr	r1, [pc, #696]	; (8000ef4 <main+0x97c>)
 8000c3c:	48a9      	ldr	r0, [pc, #676]	; (8000ee4 <main+0x96c>)
 8000c3e:	f001 fcc6 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c42:	2364      	movs	r3, #100	; 0x64
 8000c44:	2201      	movs	r2, #1
 8000c46:	49aa      	ldr	r1, [pc, #680]	; (8000ef0 <main+0x978>)
 8000c48:	48a6      	ldr	r0, [pc, #664]	; (8000ee4 <main+0x96c>)
 8000c4a:	f001 fcc0 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	2201      	movs	r2, #1
 8000c52:	49a7      	ldr	r1, [pc, #668]	; (8000ef0 <main+0x978>)
 8000c54:	48a3      	ldr	r0, [pc, #652]	; (8000ee4 <main+0x96c>)
 8000c56:	f001 fcba 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	49a4      	ldr	r1, [pc, #656]	; (8000ef0 <main+0x978>)
 8000c60:	48a0      	ldr	r0, [pc, #640]	; (8000ee4 <main+0x96c>)
 8000c62:	f001 fcb4 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	2201      	movs	r2, #1
 8000c6a:	49a1      	ldr	r1, [pc, #644]	; (8000ef0 <main+0x978>)
 8000c6c:	489d      	ldr	r0, [pc, #628]	; (8000ee4 <main+0x96c>)
 8000c6e:	f001 fcae 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c72:	2364      	movs	r3, #100	; 0x64
 8000c74:	2201      	movs	r2, #1
 8000c76:	499e      	ldr	r1, [pc, #632]	; (8000ef0 <main+0x978>)
 8000c78:	489a      	ldr	r0, [pc, #616]	; (8000ee4 <main+0x96c>)
 8000c7a:	f001 fca8 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c7e:	2364      	movs	r3, #100	; 0x64
 8000c80:	2201      	movs	r2, #1
 8000c82:	499b      	ldr	r1, [pc, #620]	; (8000ef0 <main+0x978>)
 8000c84:	4897      	ldr	r0, [pc, #604]	; (8000ee4 <main+0x96c>)
 8000c86:	f001 fca2 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4998      	ldr	r1, [pc, #608]	; (8000ef0 <main+0x978>)
 8000c90:	4894      	ldr	r0, [pc, #592]	; (8000ee4 <main+0x96c>)
 8000c92:	f001 fc9c 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000c96:	2364      	movs	r3, #100	; 0x64
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4995      	ldr	r1, [pc, #596]	; (8000ef0 <main+0x978>)
 8000c9c:	4891      	ldr	r0, [pc, #580]	; (8000ee4 <main+0x96c>)
 8000c9e:	f001 fc96 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 8000ca2:	2364      	movs	r3, #100	; 0x64
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4994      	ldr	r1, [pc, #592]	; (8000ef8 <main+0x980>)
 8000ca8:	488e      	ldr	r0, [pc, #568]	; (8000ee4 <main+0x96c>)
 8000caa:	f001 fc90 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	498f      	ldr	r1, [pc, #572]	; (8000ef0 <main+0x978>)
 8000cb4:	488b      	ldr	r0, [pc, #556]	; (8000ee4 <main+0x96c>)
 8000cb6:	f001 fc8a 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	488a      	ldr	r0, [pc, #552]	; (8000ee8 <main+0x970>)
 8000cc0:	f000 ff6e 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc8:	f000 fcdc 	bl	8001684 <HAL_Delay>

  	//6
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	4885      	ldr	r0, [pc, #532]	; (8000ee8 <main+0x970>)
 8000cd2:	f000 ff65 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000cd6:	2364      	movs	r3, #100	; 0x64
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4984      	ldr	r1, [pc, #528]	; (8000eec <main+0x974>)
 8000cdc:	4881      	ldr	r0, [pc, #516]	; (8000ee4 <main+0x96c>)
 8000cde:	f001 fc76 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000ce2:	2364      	movs	r3, #100	; 0x64
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4982      	ldr	r1, [pc, #520]	; (8000ef0 <main+0x978>)
 8000ce8:	487e      	ldr	r0, [pc, #504]	; (8000ee4 <main+0x96c>)
 8000cea:	f001 fc70 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000cee:	2364      	movs	r3, #100	; 0x64
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	497f      	ldr	r1, [pc, #508]	; (8000ef0 <main+0x978>)
 8000cf4:	487b      	ldr	r0, [pc, #492]	; (8000ee4 <main+0x96c>)
 8000cf6:	f001 fc6a 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000cfa:	2364      	movs	r3, #100	; 0x64
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	497c      	ldr	r1, [pc, #496]	; (8000ef0 <main+0x978>)
 8000d00:	4878      	ldr	r0, [pc, #480]	; (8000ee4 <main+0x96c>)
 8000d02:	f001 fc64 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4979      	ldr	r1, [pc, #484]	; (8000ef0 <main+0x978>)
 8000d0c:	4875      	ldr	r0, [pc, #468]	; (8000ee4 <main+0x96c>)
 8000d0e:	f001 fc5e 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	2201      	movs	r2, #1
 8000d16:	4976      	ldr	r1, [pc, #472]	; (8000ef0 <main+0x978>)
 8000d18:	4872      	ldr	r0, [pc, #456]	; (8000ee4 <main+0x96c>)
 8000d1a:	f001 fc58 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000d1e:	2364      	movs	r3, #100	; 0x64
 8000d20:	2201      	movs	r2, #1
 8000d22:	4974      	ldr	r1, [pc, #464]	; (8000ef4 <main+0x97c>)
 8000d24:	486f      	ldr	r0, [pc, #444]	; (8000ee4 <main+0x96c>)
 8000d26:	f001 fc52 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4970      	ldr	r1, [pc, #448]	; (8000ef0 <main+0x978>)
 8000d30:	486c      	ldr	r0, [pc, #432]	; (8000ee4 <main+0x96c>)
 8000d32:	f001 fc4c 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	2201      	movs	r2, #1
 8000d3a:	496d      	ldr	r1, [pc, #436]	; (8000ef0 <main+0x978>)
 8000d3c:	4869      	ldr	r0, [pc, #420]	; (8000ee4 <main+0x96c>)
 8000d3e:	f001 fc46 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d42:	2364      	movs	r3, #100	; 0x64
 8000d44:	2201      	movs	r2, #1
 8000d46:	496a      	ldr	r1, [pc, #424]	; (8000ef0 <main+0x978>)
 8000d48:	4866      	ldr	r0, [pc, #408]	; (8000ee4 <main+0x96c>)
 8000d4a:	f001 fc40 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	2201      	movs	r2, #1
 8000d52:	4967      	ldr	r1, [pc, #412]	; (8000ef0 <main+0x978>)
 8000d54:	4863      	ldr	r0, [pc, #396]	; (8000ee4 <main+0x96c>)
 8000d56:	f001 fc3a 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4964      	ldr	r1, [pc, #400]	; (8000ef0 <main+0x978>)
 8000d60:	4860      	ldr	r0, [pc, #384]	; (8000ee4 <main+0x96c>)
 8000d62:	f001 fc34 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d66:	2364      	movs	r3, #100	; 0x64
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4961      	ldr	r1, [pc, #388]	; (8000ef0 <main+0x978>)
 8000d6c:	485d      	ldr	r0, [pc, #372]	; (8000ee4 <main+0x96c>)
 8000d6e:	f001 fc2e 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d72:	2364      	movs	r3, #100	; 0x64
 8000d74:	2201      	movs	r2, #1
 8000d76:	495e      	ldr	r1, [pc, #376]	; (8000ef0 <main+0x978>)
 8000d78:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <main+0x96c>)
 8000d7a:	f001 fc28 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 8000d7e:	2364      	movs	r3, #100	; 0x64
 8000d80:	2201      	movs	r2, #1
 8000d82:	495d      	ldr	r1, [pc, #372]	; (8000ef8 <main+0x980>)
 8000d84:	4857      	ldr	r0, [pc, #348]	; (8000ee4 <main+0x96c>)
 8000d86:	f001 fc22 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000d8a:	2364      	movs	r3, #100	; 0x64
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4958      	ldr	r1, [pc, #352]	; (8000ef0 <main+0x978>)
 8000d90:	4854      	ldr	r0, [pc, #336]	; (8000ee4 <main+0x96c>)
 8000d92:	f001 fc1c 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2140      	movs	r1, #64	; 0x40
 8000d9a:	4853      	ldr	r0, [pc, #332]	; (8000ee8 <main+0x970>)
 8000d9c:	f000 ff00 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da4:	f000 fc6e 	bl	8001684 <HAL_Delay>

  	//7
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	484e      	ldr	r0, [pc, #312]	; (8000ee8 <main+0x970>)
 8000dae:	f000 fef7 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000db2:	2364      	movs	r3, #100	; 0x64
 8000db4:	2201      	movs	r2, #1
 8000db6:	494d      	ldr	r1, [pc, #308]	; (8000eec <main+0x974>)
 8000db8:	484a      	ldr	r0, [pc, #296]	; (8000ee4 <main+0x96c>)
 8000dba:	f001 fc08 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000dbe:	2364      	movs	r3, #100	; 0x64
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	494b      	ldr	r1, [pc, #300]	; (8000ef0 <main+0x978>)
 8000dc4:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <main+0x96c>)
 8000dc6:	f001 fc02 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000dca:	2364      	movs	r3, #100	; 0x64
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4948      	ldr	r1, [pc, #288]	; (8000ef0 <main+0x978>)
 8000dd0:	4844      	ldr	r0, [pc, #272]	; (8000ee4 <main+0x96c>)
 8000dd2:	f001 fbfc 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000dd6:	2364      	movs	r3, #100	; 0x64
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4945      	ldr	r1, [pc, #276]	; (8000ef0 <main+0x978>)
 8000ddc:	4841      	ldr	r0, [pc, #260]	; (8000ee4 <main+0x96c>)
 8000dde:	f001 fbf6 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000de2:	2364      	movs	r3, #100	; 0x64
 8000de4:	2201      	movs	r2, #1
 8000de6:	4942      	ldr	r1, [pc, #264]	; (8000ef0 <main+0x978>)
 8000de8:	483e      	ldr	r0, [pc, #248]	; (8000ee4 <main+0x96c>)
 8000dea:	f001 fbf0 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	2201      	movs	r2, #1
 8000df2:	493f      	ldr	r1, [pc, #252]	; (8000ef0 <main+0x978>)
 8000df4:	483b      	ldr	r0, [pc, #236]	; (8000ee4 <main+0x96c>)
 8000df6:	f001 fbea 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	493c      	ldr	r1, [pc, #240]	; (8000ef0 <main+0x978>)
 8000e00:	4838      	ldr	r0, [pc, #224]	; (8000ee4 <main+0x96c>)
 8000e02:	f001 fbe4 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000e06:	2364      	movs	r3, #100	; 0x64
 8000e08:	2201      	movs	r2, #1
 8000e0a:	493a      	ldr	r1, [pc, #232]	; (8000ef4 <main+0x97c>)
 8000e0c:	4835      	ldr	r0, [pc, #212]	; (8000ee4 <main+0x96c>)
 8000e0e:	f001 fbde 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	2201      	movs	r2, #1
 8000e16:	4936      	ldr	r1, [pc, #216]	; (8000ef0 <main+0x978>)
 8000e18:	4832      	ldr	r0, [pc, #200]	; (8000ee4 <main+0x96c>)
 8000e1a:	f001 fbd8 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000e1e:	2364      	movs	r3, #100	; 0x64
 8000e20:	2201      	movs	r2, #1
 8000e22:	4933      	ldr	r1, [pc, #204]	; (8000ef0 <main+0x978>)
 8000e24:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <main+0x96c>)
 8000e26:	f001 fbd2 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4930      	ldr	r1, [pc, #192]	; (8000ef0 <main+0x978>)
 8000e30:	482c      	ldr	r0, [pc, #176]	; (8000ee4 <main+0x96c>)
 8000e32:	f001 fbcc 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	2201      	movs	r2, #1
 8000e3a:	492d      	ldr	r1, [pc, #180]	; (8000ef0 <main+0x978>)
 8000e3c:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <main+0x96c>)
 8000e3e:	f001 fbc6 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	2201      	movs	r2, #1
 8000e46:	492a      	ldr	r1, [pc, #168]	; (8000ef0 <main+0x978>)
 8000e48:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <main+0x96c>)
 8000e4a:	f001 fbc0 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000e4e:	2364      	movs	r3, #100	; 0x64
 8000e50:	2201      	movs	r2, #1
 8000e52:	4927      	ldr	r1, [pc, #156]	; (8000ef0 <main+0x978>)
 8000e54:	4823      	ldr	r0, [pc, #140]	; (8000ee4 <main+0x96c>)
 8000e56:	f001 fbba 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4926      	ldr	r1, [pc, #152]	; (8000ef8 <main+0x980>)
 8000e60:	4820      	ldr	r0, [pc, #128]	; (8000ee4 <main+0x96c>)
 8000e62:	f001 fbb4 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000e66:	2364      	movs	r3, #100	; 0x64
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4921      	ldr	r1, [pc, #132]	; (8000ef0 <main+0x978>)
 8000e6c:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <main+0x96c>)
 8000e6e:	f001 fbae 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2140      	movs	r1, #64	; 0x40
 8000e76:	481c      	ldr	r0, [pc, #112]	; (8000ee8 <main+0x970>)
 8000e78:	f000 fe92 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e80:	f000 fc00 	bl	8001684 <HAL_Delay>

  	//8
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <main+0x970>)
 8000e8a:	f000 fe89 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000e8e:	2364      	movs	r3, #100	; 0x64
 8000e90:	2201      	movs	r2, #1
 8000e92:	4916      	ldr	r1, [pc, #88]	; (8000eec <main+0x974>)
 8000e94:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <main+0x96c>)
 8000e96:	f001 fb9a 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <main+0x978>)
 8000ea0:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <main+0x96c>)
 8000ea2:	f001 fb94 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4911      	ldr	r1, [pc, #68]	; (8000ef0 <main+0x978>)
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <main+0x96c>)
 8000eae:	f001 fb8e 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <main+0x978>)
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <main+0x96c>)
 8000eba:	f001 fb88 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000ebe:	2364      	movs	r3, #100	; 0x64
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	490b      	ldr	r1, [pc, #44]	; (8000ef0 <main+0x978>)
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <main+0x96c>)
 8000ec6:	f001 fb82 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000eca:	2364      	movs	r3, #100	; 0x64
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <main+0x978>)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <main+0x96c>)
 8000ed2:	f001 fb7c 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000ed6:	2364      	movs	r3, #100	; 0x64
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4905      	ldr	r1, [pc, #20]	; (8000ef0 <main+0x978>)
 8000edc:	4801      	ldr	r0, [pc, #4]	; (8000ee4 <main+0x96c>)
 8000ede:	f001 fb76 	bl	80025ce <HAL_SPI_Transmit>
 8000ee2:	e00b      	b.n	8000efc <main+0x984>
 8000ee4:	2000009c 	.word	0x2000009c
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000003 	.word	0x20000003
 8000ef4:	20000002 	.word	0x20000002
 8000ef8:	20000001 	.word	0x20000001
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000efc:	2364      	movs	r3, #100	; 0x64
 8000efe:	2201      	movs	r2, #1
 8000f00:	4956      	ldr	r1, [pc, #344]	; (800105c <main+0xae4>)
 8000f02:	4857      	ldr	r0, [pc, #348]	; (8001060 <main+0xae8>)
 8000f04:	f001 fb63 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4955      	ldr	r1, [pc, #340]	; (8001064 <main+0xaec>)
 8000f0e:	4854      	ldr	r0, [pc, #336]	; (8001060 <main+0xae8>)
 8000f10:	f001 fb5d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	2201      	movs	r2, #1
 8000f18:	4950      	ldr	r1, [pc, #320]	; (800105c <main+0xae4>)
 8000f1a:	4851      	ldr	r0, [pc, #324]	; (8001060 <main+0xae8>)
 8000f1c:	f001 fb57 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	2201      	movs	r2, #1
 8000f24:	494d      	ldr	r1, [pc, #308]	; (800105c <main+0xae4>)
 8000f26:	484e      	ldr	r0, [pc, #312]	; (8001060 <main+0xae8>)
 8000f28:	f001 fb51 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	2201      	movs	r2, #1
 8000f30:	494a      	ldr	r1, [pc, #296]	; (800105c <main+0xae4>)
 8000f32:	484b      	ldr	r0, [pc, #300]	; (8001060 <main+0xae8>)
 8000f34:	f001 fb4b 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4947      	ldr	r1, [pc, #284]	; (800105c <main+0xae4>)
 8000f3e:	4848      	ldr	r0, [pc, #288]	; (8001060 <main+0xae8>)
 8000f40:	f001 fb45 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	2201      	movs	r2, #1
 8000f48:	4944      	ldr	r1, [pc, #272]	; (800105c <main+0xae4>)
 8000f4a:	4845      	ldr	r0, [pc, #276]	; (8001060 <main+0xae8>)
 8000f4c:	f001 fb3f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	2201      	movs	r2, #1
 8000f54:	4944      	ldr	r1, [pc, #272]	; (8001068 <main+0xaf0>)
 8000f56:	4842      	ldr	r0, [pc, #264]	; (8001060 <main+0xae8>)
 8000f58:	f001 fb39 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	2201      	movs	r2, #1
 8000f60:	493e      	ldr	r1, [pc, #248]	; (800105c <main+0xae4>)
 8000f62:	483f      	ldr	r0, [pc, #252]	; (8001060 <main+0xae8>)
 8000f64:	f001 fb33 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <main+0xaf4>)
 8000f6e:	f000 fe17 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f76:	f000 fb85 	bl	8001684 <HAL_Delay>

  	//9
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	483b      	ldr	r0, [pc, #236]	; (800106c <main+0xaf4>)
 8000f80:	f000 fe0e 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_ZERO, 1, 100);
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	2201      	movs	r2, #1
 8000f88:	4939      	ldr	r1, [pc, #228]	; (8001070 <main+0xaf8>)
 8000f8a:	4835      	ldr	r0, [pc, #212]	; (8001060 <main+0xae8>)
 8000f8c:	f001 fb1f 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	2201      	movs	r2, #1
 8000f94:	4931      	ldr	r1, [pc, #196]	; (800105c <main+0xae4>)
 8000f96:	4832      	ldr	r0, [pc, #200]	; (8001060 <main+0xae8>)
 8000f98:	f001 fb19 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	492e      	ldr	r1, [pc, #184]	; (800105c <main+0xae4>)
 8000fa2:	482f      	ldr	r0, [pc, #188]	; (8001060 <main+0xae8>)
 8000fa4:	f001 fb13 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	2201      	movs	r2, #1
 8000fac:	492b      	ldr	r1, [pc, #172]	; (800105c <main+0xae4>)
 8000fae:	482c      	ldr	r0, [pc, #176]	; (8001060 <main+0xae8>)
 8000fb0:	f001 fb0d 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4928      	ldr	r1, [pc, #160]	; (800105c <main+0xae4>)
 8000fba:	4829      	ldr	r0, [pc, #164]	; (8001060 <main+0xae8>)
 8000fbc:	f001 fb07 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4925      	ldr	r1, [pc, #148]	; (800105c <main+0xae4>)
 8000fc6:	4826      	ldr	r0, [pc, #152]	; (8001060 <main+0xae8>)
 8000fc8:	f001 fb01 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4922      	ldr	r1, [pc, #136]	; (800105c <main+0xae4>)
 8000fd2:	4823      	ldr	r0, [pc, #140]	; (8001060 <main+0xae8>)
 8000fd4:	f001 fafb 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	2201      	movs	r2, #1
 8000fdc:	491f      	ldr	r1, [pc, #124]	; (800105c <main+0xae4>)
 8000fde:	4820      	ldr	r0, [pc, #128]	; (8001060 <main+0xae8>)
 8000fe0:	f001 faf5 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	491c      	ldr	r1, [pc, #112]	; (800105c <main+0xae4>)
 8000fea:	481d      	ldr	r0, [pc, #116]	; (8001060 <main+0xae8>)
 8000fec:	f001 faef 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_BRIGHT, 1, 100);
 8000ff0:	2364      	movs	r3, #100	; 0x64
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	491b      	ldr	r1, [pc, #108]	; (8001064 <main+0xaec>)
 8000ff6:	481a      	ldr	r0, [pc, #104]	; (8001060 <main+0xae8>)
 8000ff8:	f001 fae9 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	2201      	movs	r2, #1
 8001000:	4916      	ldr	r1, [pc, #88]	; (800105c <main+0xae4>)
 8001002:	4817      	ldr	r0, [pc, #92]	; (8001060 <main+0xae8>)
 8001004:	f001 fae3 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	2201      	movs	r2, #1
 800100c:	4913      	ldr	r1, [pc, #76]	; (800105c <main+0xae4>)
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <main+0xae8>)
 8001010:	f001 fadd 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	2201      	movs	r2, #1
 8001018:	4910      	ldr	r1, [pc, #64]	; (800105c <main+0xae4>)
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <main+0xae8>)
 800101c:	f001 fad7 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8001020:	2364      	movs	r3, #100	; 0x64
 8001022:	2201      	movs	r2, #1
 8001024:	490d      	ldr	r1, [pc, #52]	; (800105c <main+0xae4>)
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <main+0xae8>)
 8001028:	f001 fad1 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_MEDIUM, 1, 100);
 800102c:	2364      	movs	r3, #100	; 0x64
 800102e:	2201      	movs	r2, #1
 8001030:	490d      	ldr	r1, [pc, #52]	; (8001068 <main+0xaf0>)
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <main+0xae8>)
 8001034:	f001 facb 	bl	80025ce <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EXIXE_DIM, 1, 100);
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	2201      	movs	r2, #1
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <main+0xae4>)
 800103e:	4808      	ldr	r0, [pc, #32]	; (8001060 <main+0xae8>)
 8001040:	f001 fac5 	bl	80025ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2140      	movs	r1, #64	; 0x40
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <main+0xaf4>)
 800104a:	f000 fda9 	bl	8001ba0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f000 fb17 	bl	8001684 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001056:	f7ff bb18 	b.w	800068a <main+0x112>
 800105a:	bf00      	nop
 800105c:	20000003 	.word	0x20000003
 8001060:	2000009c 	.word	0x2000009c
 8001064:	20000002 	.word	0x20000002
 8001068:	20000001 	.word	0x20000001
 800106c:	40020400 	.word	0x40020400
 8001070:	20000000 	.word	0x20000000

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f001 ffc6 	bl	8003014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <SystemClock_Config+0xd0>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <SystemClock_Config+0xd0>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a6:	6413      	str	r3, [r2, #64]	; 0x40
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <SystemClock_Config+0xd0>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <SystemClock_Config+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <SystemClock_Config+0xd4>)
 80010c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <SystemClock_Config+0xd4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010dc:	2310      	movs	r3, #16
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e0:	2302      	movs	r3, #2
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010e8:	2310      	movs	r3, #16
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010f6:	2307      	movs	r3, #7
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fd68 	bl	8001bd4 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800110a:	f000 f8ef 	bl	80012ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2302      	movs	r3, #2
 8001114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2102      	movs	r1, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f000 ffca 	bl	80020c4 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001136:	f000 f8d9 	bl	80012ec <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <MX_SPI1_Init+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800115c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_SPI1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001180:	2230      	movs	r2, #48	; 0x30
 8001182:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI1_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001198:	220a      	movs	r2, #10
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_SPI1_Init+0x64>)
 800119e:	f001 f98d 	bl	80024bc <HAL_SPI_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a8:	f000 f8a0 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000009c 	.word	0x2000009c
 80011b4:	40013000 	.word	0x40013000

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f001 fbf4 	bl	80029dc <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f877 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000f4 	.word	0x200000f4
 8001208:	40004400 	.word	0x40004400

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a2c      	ldr	r2, [pc, #176]	; (80012dc <MX_GPIO_Init+0xd0>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a25      	ldr	r2, [pc, #148]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_GPIO_Init+0xd0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2140      	movs	r1, #64	; 0x40
 8001296:	4812      	ldr	r0, [pc, #72]	; (80012e0 <MX_GPIO_Init+0xd4>)
 8001298:	f000 fc82 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_GPIO_Init+0xd8>)
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_GPIO_Init+0xdc>)
 80012b2:	f000 faf1 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b6:	2340      	movs	r3, #64	; 0x40
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_GPIO_Init+0xd4>)
 80012ce:	f000 fae3 	bl	8001898 <HAL_GPIO_Init>

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400
 80012e4:	10210000 	.word	0x10210000
 80012e8:	40020800 	.word	0x40020800

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <HAL_MspInit+0x4c>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x4c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001336:	2007      	movs	r0, #7
 8001338:	f000 fa7a 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_SPI_MspInit+0x84>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12b      	bne.n	80013c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 8001374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013a2:	23a0      	movs	r3, #160	; 0xa0
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013b2:	2305      	movs	r3, #5
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_SPI_MspInit+0x8c>)
 80013be:	f000 fa6b 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40013000 	.word	0x40013000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_UART_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12b      	bne.n	8001452 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_UART_MspInit+0x88>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_UART_MspInit+0x88>)
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_UART_MspInit+0x88>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_UART_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <HAL_UART_MspInit+0x88>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_UART_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001432:	230c      	movs	r3, #12
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001442:	2307      	movs	r3, #7
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <HAL_UART_MspInit+0x8c>)
 800144e:	f000 fa23 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40004400 	.word	0x40004400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 f8c6 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	; (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f001 fd68 	bl	8002fc0 <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20018000 	.word	0x20018000
 800151c:	00000400 	.word	0x00000400
 8001520:	20000090 	.word	0x20000090
 8001524:	20000150 	.word	0x20000150

08001528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001552:	490e      	ldr	r1, [pc, #56]	; (800158c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001554:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001568:	4c0b      	ldr	r4, [pc, #44]	; (8001598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001576:	f7ff ffd7 	bl	8001528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157a:	f001 fd27 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157e:	f7fe fffb 	bl	8000578 <main>
  bx  lr    
 8001582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001584:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001590:	08003900 	.word	0x08003900
  ldr r2, =_sbss
 8001594:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001598:	2000014c 	.word	0x2000014c

0800159c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_Init+0x40>)
 80015aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_Init+0x40>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_Init+0x40>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f931 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fe90 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f93b 	bl	800187e <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f911 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000004 	.word	0x20000004
 800163c:	2000000c 	.word	0x2000000c
 8001640:	20000008 	.word	0x20000008

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	2000000c 	.word	0x2000000c
 8001668:	20000138 	.word	0x20000138

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000138 	.word	0x20000138

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000000c 	.word	0x2000000c

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff8e 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff47 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff5c 	bl	8001714 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff8e 	bl	8001784 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffb0 	bl	80017ec <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e159      	b.n	8001b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8148 	bne.w	8001b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d005      	beq.n	80018ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b03      	cmp	r3, #3
 8001956:	d017      	beq.n	8001988 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a2 	beq.w	8001b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3a:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a49      	ldr	r2, [pc, #292]	; (8001b88 <HAL_GPIO_Init+0x2f0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x202>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a48      	ldr	r2, [pc, #288]	; (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x1fe>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a47      	ldr	r2, [pc, #284]	; (8001b90 <HAL_GPIO_Init+0x2f8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a46      	ldr	r2, [pc, #280]	; (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x1f6>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <HAL_GPIO_Init+0x300>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x1f2>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ade:	4a2f      	ldr	r2, [pc, #188]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b08:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f aea2 	bls.w	80018b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e264      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d075      	beq.n	8001cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf2:	4ba3      	ldr	r3, [pc, #652]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d00c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfe:	4ba0      	ldr	r3, [pc, #640]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d112      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b9d      	ldr	r3, [pc, #628]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c16:	d10b      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d05b      	beq.n	8001cdc <HAL_RCC_OscConfig+0x108>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d157      	bne.n	8001cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e23f      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d106      	bne.n	8001c48 <HAL_RCC_OscConfig+0x74>
 8001c3a:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a90      	ldr	r2, [pc, #576]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e01d      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a87      	ldr	r2, [pc, #540]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a83      	ldr	r2, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a80      	ldr	r2, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fcee 	bl	800166c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff fcea 	bl	800166c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e204      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0xc0>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fcda 	bl	800166c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff fcd6 	bl	800166c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1f0      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0xe8>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf6:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d11c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x152>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e1c4      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4952      	ldr	r1, [pc, #328]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	e03a      	b.n	8001db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCC_OscConfig+0x2b0>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff fc8f 	bl	800166c <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff fc8b 	bl	800166c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1a5      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4940      	ldr	r1, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x2b0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fc6e 	bl	800166c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff fc6a 	bl	800166c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e184      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d030      	beq.n	8001e20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d016      	beq.n	8001df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0x2b4>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff fc4e 	bl	800166c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff fc4a 	bl	800166c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e164      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x200>
 8001df2:	e015      	b.n	8001e20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x2b4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fc37 	bl	800166c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff fc33 	bl	800166c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e14d      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a0 	beq.w	8001f6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d121      	bne.n	8001eae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fbf9 	bl	800166c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e011      	b.n	8001ea2 <HAL_RCC_OscConfig+0x2ce>
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
 8001e8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e90:	f7ff fbec 	bl	800166c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e106      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b85      	ldr	r3, [pc, #532]	; (80020b8 <HAL_RCC_OscConfig+0x4e4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
 8001eb6:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a80      	ldr	r2, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	e01c      	b.n	8001efe <HAL_RCC_OscConfig+0x32a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x312>
 8001ecc:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	e00b      	b.n	8001efe <HAL_RCC_OscConfig+0x32a>
 8001ee6:	4b75      	ldr	r3, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a74      	ldr	r2, [pc, #464]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef2:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	4a71      	ldr	r2, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff fbb1 	bl	800166c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff fbad 	bl	800166c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0c5      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	4b65      	ldr	r3, [pc, #404]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ee      	beq.n	8001f0e <HAL_RCC_OscConfig+0x33a>
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fb9b 	bl	800166c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fb97 	bl	800166c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0af      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a55      	ldr	r2, [pc, #340]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 809b 	beq.w	80020ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d05c      	beq.n	800203e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d141      	bne.n	8002010 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x4ec>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff fb6b 	bl	800166c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff fb67 	bl	800166c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e081      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	019b      	lsls	r3, r3, #6
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	041b      	lsls	r3, r3, #16
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	061b      	lsls	r3, r3, #24
 8001fdc:	4937      	ldr	r1, [pc, #220]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe2:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <HAL_RCC_OscConfig+0x4ec>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fb40 	bl	800166c <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff fb3c 	bl	800166c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e056      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
 800200e:	e04e      	b.n	80020ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_RCC_OscConfig+0x4ec>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fb29 	bl	800166c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff fb25 	bl	800166c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e03f      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x44a>
 800203c:	e037      	b.n	80020ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e032      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_RCC_OscConfig+0x4e8>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d028      	beq.n	80020aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d121      	bne.n	80020aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d11a      	bne.n	80020aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002080:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002082:	4293      	cmp	r3, r2
 8002084:	d111      	bne.n	80020aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40007000 	.word	0x40007000
 80020bc:	40023800 	.word	0x40023800
 80020c0:	42470060 	.word	0x42470060

080020c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0cc      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d8:	4b68      	ldr	r3, [pc, #416]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d90c      	bls.n	8002100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b65      	ldr	r3, [pc, #404]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b8      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800213a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	494d      	ldr	r1, [pc, #308]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d044      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d119      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d003      	beq.n	8002182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217e:	2b03      	cmp	r3, #3
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e06f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e067      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4934      	ldr	r1, [pc, #208]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b4:	f7ff fa5a 	bl	800166c <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021bc:	f7ff fa56 	bl	800166c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e04f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 020c 	and.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1eb      	bne.n	80021bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d20c      	bcs.n	800220c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e032      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4916      	ldr	r1, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	490e      	ldr	r1, [pc, #56]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800224a:	f000 f821 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800224e:	4602      	mov	r2, r0
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	5ccb      	ldrb	r3, [r1, r3]
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f9ba 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00
 8002280:	40023800 	.word	0x40023800
 8002284:	080038a4 	.word	0x080038a4
 8002288:	20000004 	.word	0x20000004
 800228c:	20000008 	.word	0x20000008

08002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	2300      	movs	r3, #0
 80022a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a8:	4b67      	ldr	r3, [pc, #412]	; (8002448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d00d      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x40>
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	f200 80bd 	bhi.w	8002434 <HAL_RCC_GetSysClockFreq+0x1a4>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x34>
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x3a>
 80022c2:	e0b7      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b61      	ldr	r3, [pc, #388]	; (800244c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022c6:	60bb      	str	r3, [r7, #8]
       break;
 80022c8:	e0b7      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ca:	4b61      	ldr	r3, [pc, #388]	; (8002450 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80022cc:	60bb      	str	r3, [r7, #8]
      break;
 80022ce:	e0b4      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d0:	4b5d      	ldr	r3, [pc, #372]	; (8002448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022da:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d04d      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e6:	4b58      	ldr	r3, [pc, #352]	; (8002448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	099b      	lsrs	r3, r3, #6
 80022ec:	461a      	mov	r2, r3
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	ea02 0800 	and.w	r8, r2, r0
 80022fe:	ea03 0901 	and.w	r9, r3, r1
 8002302:	4640      	mov	r0, r8
 8002304:	4649      	mov	r1, r9
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	014b      	lsls	r3, r1, #5
 8002310:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002314:	0142      	lsls	r2, r0, #5
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	ebb0 0008 	subs.w	r0, r0, r8
 800231e:	eb61 0109 	sbc.w	r1, r1, r9
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	018b      	lsls	r3, r1, #6
 800232c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002330:	0182      	lsls	r2, r0, #6
 8002332:	1a12      	subs	r2, r2, r0
 8002334:	eb63 0301 	sbc.w	r3, r3, r1
 8002338:	f04f 0000 	mov.w	r0, #0
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	00d9      	lsls	r1, r3, #3
 8002342:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002346:	00d0      	lsls	r0, r2, #3
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	eb12 0208 	adds.w	r2, r2, r8
 8002350:	eb43 0309 	adc.w	r3, r3, r9
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	0259      	lsls	r1, r3, #9
 800235e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002362:	0250      	lsls	r0, r2, #9
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	461a      	mov	r2, r3
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	f7fd ff84 	bl	8000280 <__aeabi_uldivmod>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4613      	mov	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e04a      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	099b      	lsrs	r3, r3, #6
 8002388:	461a      	mov	r2, r3
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002392:	f04f 0100 	mov.w	r1, #0
 8002396:	ea02 0400 	and.w	r4, r2, r0
 800239a:	ea03 0501 	and.w	r5, r3, r1
 800239e:	4620      	mov	r0, r4
 80023a0:	4629      	mov	r1, r5
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	014b      	lsls	r3, r1, #5
 80023ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023b0:	0142      	lsls	r2, r0, #5
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	1b00      	subs	r0, r0, r4
 80023b8:	eb61 0105 	sbc.w	r1, r1, r5
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	018b      	lsls	r3, r1, #6
 80023c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023ca:	0182      	lsls	r2, r0, #6
 80023cc:	1a12      	subs	r2, r2, r0
 80023ce:	eb63 0301 	sbc.w	r3, r3, r1
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	00d9      	lsls	r1, r3, #3
 80023dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023e0:	00d0      	lsls	r0, r2, #3
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	1912      	adds	r2, r2, r4
 80023e8:	eb45 0303 	adc.w	r3, r5, r3
 80023ec:	f04f 0000 	mov.w	r0, #0
 80023f0:	f04f 0100 	mov.w	r1, #0
 80023f4:	0299      	lsls	r1, r3, #10
 80023f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023fa:	0290      	lsls	r0, r2, #10
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	461a      	mov	r2, r3
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	f7fd ff38 	bl	8000280 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4613      	mov	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	60bb      	str	r3, [r7, #8]
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002436:	60bb      	str	r3, [r7, #8]
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	68bb      	ldr	r3, [r7, #8]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	00f42400 	.word	0x00f42400
 8002450:	007a1200 	.word	0x007a1200

08002454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_RCC_GetHCLKFreq+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000004 	.word	0x20000004

0800246c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002470:	f7ff fff0 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0a9b      	lsrs	r3, r3, #10
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	080038b4 	.word	0x080038b4

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002498:	f7ff ffdc 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0b5b      	lsrs	r3, r3, #13
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4903      	ldr	r1, [pc, #12]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	080038b4 	.word	0x080038b4

080024bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07b      	b.n	80025c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024de:	d009      	beq.n	80024f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
 80024e6:	e005      	b.n	80024f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe ff1a 	bl	8001348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0104 	and.w	r1, r3, #4
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f003 0210 	and.w	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b088      	sub	sp, #32
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_SPI_Transmit+0x22>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e126      	b.n	800283e <HAL_SPI_Transmit+0x270>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025f8:	f7ff f838 	bl	800166c <HAL_GetTick>
 80025fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d002      	beq.n	8002614 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002612:	e10b      	b.n	800282c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_SPI_Transmit+0x52>
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002624:	e102      	b.n	800282c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2203      	movs	r2, #3
 800262a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	88fa      	ldrh	r2, [r7, #6]
 800263e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266c:	d10f      	bne.n	800268e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800268c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d007      	beq.n	80026ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b4:	d14b      	bne.n	800274e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_SPI_Transmit+0xf6>
 80026be:	8afb      	ldrh	r3, [r7, #22]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d13e      	bne.n	8002742 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	881a      	ldrh	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	1c9a      	adds	r2, r3, #2
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026e8:	e02b      	b.n	8002742 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d112      	bne.n	800271e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	1c9a      	adds	r2, r3, #2
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	86da      	strh	r2, [r3, #54]	; 0x36
 800271c:	e011      	b.n	8002742 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271e:	f7fe ffa5 	bl	800166c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d803      	bhi.n	8002736 <HAL_SPI_Transmit+0x168>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d102      	bne.n	800273c <HAL_SPI_Transmit+0x16e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002740:	e074      	b.n	800282c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ce      	bne.n	80026ea <HAL_SPI_Transmit+0x11c>
 800274c:	e04c      	b.n	80027e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_SPI_Transmit+0x18e>
 8002756:	8afb      	ldrh	r3, [r7, #22]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d140      	bne.n	80027de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002782:	e02c      	b.n	80027de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d113      	bne.n	80027ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80027b8:	e011      	b.n	80027de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ba:	f7fe ff57 	bl	800166c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d803      	bhi.n	80027d2 <HAL_SPI_Transmit+0x204>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d102      	bne.n	80027d8 <HAL_SPI_Transmit+0x20a>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027dc:	e026      	b.n	800282c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1cd      	bne.n	8002784 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f8b3 	bl	8002958 <SPI_EndRxTxTransaction>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
 8002828:	e000      	b.n	800282c <HAL_SPI_Transmit+0x25e>
  }

error:
 800282a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800283c:	7ffb      	ldrb	r3, [r7, #31]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002858:	f7fe ff08 	bl	800166c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	4413      	add	r3, r2
 8002866:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002868:	f7fe ff00 	bl	800166c <HAL_GetTick>
 800286c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800286e:	4b39      	ldr	r3, [pc, #228]	; (8002954 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	015b      	lsls	r3, r3, #5
 8002874:	0d1b      	lsrs	r3, r3, #20
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	fb02 f303 	mul.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800287e:	e054      	b.n	800292a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d050      	beq.n	800292a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002888:	f7fe fef0 	bl	800166c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	429a      	cmp	r2, r3
 8002896:	d902      	bls.n	800289e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d13d      	bne.n	800291a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b6:	d111      	bne.n	80028dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c0:	d004      	beq.n	80028cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ca:	d107      	bne.n	80028dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e4:	d10f      	bne.n	8002906 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002904:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e017      	b.n	800294a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3b01      	subs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	429a      	cmp	r2, r3
 8002946:	d19b      	bne.n	8002880 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000004 	.word	0x20000004

08002958 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <SPI_EndRxTxTransaction+0x7c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <SPI_EndRxTxTransaction+0x80>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0d5b      	lsrs	r3, r3, #21
 8002970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002982:	d112      	bne.n	80029aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2200      	movs	r2, #0
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff ff5a 	bl	8002848 <SPI_WaitFlagStateUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e00f      	b.n	80029ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d0f2      	beq.n	80029aa <SPI_EndRxTxTransaction+0x52>
 80029c4:	e000      	b.n	80029c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80029c6:	bf00      	nop
  }

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000004 	.word	0x20000004
 80029d8:	165e9f81 	.word	0x165e9f81

080029dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e03f      	b.n	8002a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe fce8 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f905 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08a      	sub	sp, #40	; 0x28
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d17c      	bne.n	8002b90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Transmit+0x2c>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e075      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Transmit+0x3e>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e06e      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aca:	f7fe fdcf 	bl	800166c <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae4:	d108      	bne.n	8002af8 <HAL_UART_Transmit+0x82>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e003      	b.n	8002b00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b08:	e02a      	b.n	8002b60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f840 	bl	8002b9a <UART_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e036      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e007      	b.n	8002b52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1cf      	bne.n	8002b0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f810 	bl	8002b9a <UART_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002baa:	e02c      	b.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d028      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <UART_WaitOnFlagUntilTimeout+0x30>
 8002bba:	f7fe fd57 	bl	800166c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d21d      	bcs.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bd8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e00f      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d0c3      	beq.n	8002bac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b09f      	sub	sp, #124	; 0x7c
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	ea40 0301 	orr.w	r3, r0, r1
 8002c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c74:	f021 010c 	bic.w	r1, r1, #12
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	6999      	ldr	r1, [r3, #24]
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	ea40 0301 	orr.w	r3, r0, r1
 8002c98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4bc5      	ldr	r3, [pc, #788]	; (8002fb4 <UART_SetConfig+0x384>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d004      	beq.n	8002cae <UART_SetConfig+0x7e>
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4bc3      	ldr	r3, [pc, #780]	; (8002fb8 <UART_SetConfig+0x388>)
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d103      	bne.n	8002cb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cae:	f7ff fbf1 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8002cb2:	6778      	str	r0, [r7, #116]	; 0x74
 8002cb4:	e002      	b.n	8002cbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cb6:	f7ff fbd9 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 8002cba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc4:	f040 80b6 	bne.w	8002e34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cca:	461c      	mov	r4, r3
 8002ccc:	f04f 0500 	mov.w	r5, #0
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	1891      	adds	r1, r2, r2
 8002cd6:	6439      	str	r1, [r7, #64]	; 0x40
 8002cd8:	415b      	adcs	r3, r3
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
 8002cdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce0:	1912      	adds	r2, r2, r4
 8002ce2:	eb45 0303 	adc.w	r3, r5, r3
 8002ce6:	f04f 0000 	mov.w	r0, #0
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	00d9      	lsls	r1, r3, #3
 8002cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cf4:	00d0      	lsls	r0, r2, #3
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	1911      	adds	r1, r2, r4
 8002cfc:	6639      	str	r1, [r7, #96]	; 0x60
 8002cfe:	416b      	adcs	r3, r5
 8002d00:	667b      	str	r3, [r7, #100]	; 0x64
 8002d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	1891      	adds	r1, r2, r2
 8002d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d10:	415b      	adcs	r3, r3
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d1c:	f7fd fab0 	bl	8000280 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4ba5      	ldr	r3, [pc, #660]	; (8002fbc <UART_SetConfig+0x38c>)
 8002d26:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	011e      	lsls	r6, r3, #4
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	461c      	mov	r4, r3
 8002d32:	f04f 0500 	mov.w	r5, #0
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	1891      	adds	r1, r2, r2
 8002d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d3e:	415b      	adcs	r3, r3
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
 8002d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d46:	1912      	adds	r2, r2, r4
 8002d48:	eb45 0303 	adc.w	r3, r5, r3
 8002d4c:	f04f 0000 	mov.w	r0, #0
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	00d9      	lsls	r1, r3, #3
 8002d56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d5a:	00d0      	lsls	r0, r2, #3
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	1911      	adds	r1, r2, r4
 8002d62:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d64:	416b      	adcs	r3, r5
 8002d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	1891      	adds	r1, r2, r2
 8002d74:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d76:	415b      	adcs	r3, r3
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d82:	f7fd fa7d 	bl	8000280 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <UART_SetConfig+0x38c>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	; 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	3332      	adds	r3, #50	; 0x32
 8002d9e:	4a87      	ldr	r2, [pc, #540]	; (8002fbc <UART_SetConfig+0x38c>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dac:	441e      	add	r6, r3
 8002dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db0:	4618      	mov	r0, r3
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	1894      	adds	r4, r2, r2
 8002dbc:	623c      	str	r4, [r7, #32]
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dc6:	1812      	adds	r2, r2, r0
 8002dc8:	eb41 0303 	adc.w	r3, r1, r3
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	f04f 0500 	mov.w	r5, #0
 8002dd4:	00dd      	lsls	r5, r3, #3
 8002dd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dda:	00d4      	lsls	r4, r2, #3
 8002ddc:	4622      	mov	r2, r4
 8002dde:	462b      	mov	r3, r5
 8002de0:	1814      	adds	r4, r2, r0
 8002de2:	653c      	str	r4, [r7, #80]	; 0x50
 8002de4:	414b      	adcs	r3, r1
 8002de6:	657b      	str	r3, [r7, #84]	; 0x54
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	1891      	adds	r1, r2, r2
 8002df4:	61b9      	str	r1, [r7, #24]
 8002df6:	415b      	adcs	r3, r3
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e02:	f7fd fa3d 	bl	8000280 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	2164      	movs	r1, #100	; 0x64
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	3332      	adds	r3, #50	; 0x32
 8002e1e:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	f003 0207 	and.w	r2, r3, #7
 8002e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4432      	add	r2, r6
 8002e30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e32:	e0b9      	b.n	8002fa8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e36:	461c      	mov	r4, r3
 8002e38:	f04f 0500 	mov.w	r5, #0
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	462b      	mov	r3, r5
 8002e40:	1891      	adds	r1, r2, r2
 8002e42:	6139      	str	r1, [r7, #16]
 8002e44:	415b      	adcs	r3, r3
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e4c:	1912      	adds	r2, r2, r4
 8002e4e:	eb45 0303 	adc.w	r3, r5, r3
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	00d9      	lsls	r1, r3, #3
 8002e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e60:	00d0      	lsls	r0, r2, #3
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	eb12 0804 	adds.w	r8, r2, r4
 8002e6a:	eb43 0905 	adc.w	r9, r3, r5
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	008b      	lsls	r3, r1, #2
 8002e82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e86:	0082      	lsls	r2, r0, #2
 8002e88:	4640      	mov	r0, r8
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	f7fd f9f8 	bl	8000280 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e96:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	011e      	lsls	r6, r3, #4
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	1894      	adds	r4, r2, r2
 8002eac:	60bc      	str	r4, [r7, #8]
 8002eae:	415b      	adcs	r3, r3
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb6:	1812      	adds	r2, r2, r0
 8002eb8:	eb41 0303 	adc.w	r3, r1, r3
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	f04f 0500 	mov.w	r5, #0
 8002ec4:	00dd      	lsls	r5, r3, #3
 8002ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002eca:	00d4      	lsls	r4, r2, #3
 8002ecc:	4622      	mov	r2, r4
 8002ece:	462b      	mov	r3, r5
 8002ed0:	1814      	adds	r4, r2, r0
 8002ed2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ed4:	414b      	adcs	r3, r1
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	008b      	lsls	r3, r1, #2
 8002eec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ef0:	0082      	lsls	r2, r0, #2
 8002ef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ef6:	f7fd f9c3 	bl	8000280 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f00:	fba3 1302 	umull	r1, r3, r3, r2
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	2164      	movs	r1, #100	; 0x64
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	3332      	adds	r3, #50	; 0x32
 8002f12:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1e:	441e      	add	r6, r3
 8002f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f22:	4618      	mov	r0, r3
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	1894      	adds	r4, r2, r2
 8002f2e:	603c      	str	r4, [r7, #0]
 8002f30:	415b      	adcs	r3, r3
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f38:	1812      	adds	r2, r2, r0
 8002f3a:	eb41 0303 	adc.w	r3, r1, r3
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	f04f 0500 	mov.w	r5, #0
 8002f46:	00dd      	lsls	r5, r3, #3
 8002f48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f4c:	00d4      	lsls	r4, r2, #3
 8002f4e:	4622      	mov	r2, r4
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb12 0a00 	adds.w	sl, r2, r0
 8002f56:	eb43 0b01 	adc.w	fp, r3, r1
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	008b      	lsls	r3, r1, #2
 8002f6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f72:	0082      	lsls	r2, r0, #2
 8002f74:	4650      	mov	r0, sl
 8002f76:	4659      	mov	r1, fp
 8002f78:	f7fd f982 	bl	8000280 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f82:	fba3 1302 	umull	r1, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2164      	movs	r1, #100	; 0x64
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	3332      	adds	r3, #50	; 0x32
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	f003 020f 	and.w	r2, r3, #15
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4432      	add	r2, r6
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	377c      	adds	r7, #124	; 0x7c
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40011000 	.word	0x40011000
 8002fb8:	40011400 	.word	0x40011400
 8002fbc:	51eb851f 	.word	0x51eb851f

08002fc0 <__errno>:
 8002fc0:	4b01      	ldr	r3, [pc, #4]	; (8002fc8 <__errno+0x8>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000010 	.word	0x20000010

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4d0d      	ldr	r5, [pc, #52]	; (8003004 <__libc_init_array+0x38>)
 8002fd0:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <__libc_init_array+0x3c>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	42a6      	cmp	r6, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	4d0b      	ldr	r5, [pc, #44]	; (800300c <__libc_init_array+0x40>)
 8002fde:	4c0c      	ldr	r4, [pc, #48]	; (8003010 <__libc_init_array+0x44>)
 8002fe0:	f000 fc4e 	bl	8003880 <_init>
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	2600      	movs	r6, #0
 8002fea:	42a6      	cmp	r6, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff4:	4798      	blx	r3
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffe:	4798      	blx	r3
 8003000:	3601      	adds	r6, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	080038f8 	.word	0x080038f8
 8003008:	080038f8 	.word	0x080038f8
 800300c:	080038f8 	.word	0x080038f8
 8003010:	080038fc 	.word	0x080038fc

08003014 <memset>:
 8003014:	4402      	add	r2, r0
 8003016:	4603      	mov	r3, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	f803 1b01 	strb.w	r1, [r3], #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <siprintf>:
 8003024:	b40e      	push	{r1, r2, r3}
 8003026:	b500      	push	{lr}
 8003028:	b09c      	sub	sp, #112	; 0x70
 800302a:	ab1d      	add	r3, sp, #116	; 0x74
 800302c:	9002      	str	r0, [sp, #8]
 800302e:	9006      	str	r0, [sp, #24]
 8003030:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003034:	4809      	ldr	r0, [pc, #36]	; (800305c <siprintf+0x38>)
 8003036:	9107      	str	r1, [sp, #28]
 8003038:	9104      	str	r1, [sp, #16]
 800303a:	4909      	ldr	r1, [pc, #36]	; (8003060 <siprintf+0x3c>)
 800303c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003040:	9105      	str	r1, [sp, #20]
 8003042:	6800      	ldr	r0, [r0, #0]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	a902      	add	r1, sp, #8
 8003048:	f000 f868 	bl	800311c <_svfiprintf_r>
 800304c:	9b02      	ldr	r3, [sp, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	b01c      	add	sp, #112	; 0x70
 8003054:	f85d eb04 	ldr.w	lr, [sp], #4
 8003058:	b003      	add	sp, #12
 800305a:	4770      	bx	lr
 800305c:	20000010 	.word	0x20000010
 8003060:	ffff0208 	.word	0xffff0208

08003064 <__ssputs_r>:
 8003064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	688e      	ldr	r6, [r1, #8]
 800306a:	429e      	cmp	r6, r3
 800306c:	4682      	mov	sl, r0
 800306e:	460c      	mov	r4, r1
 8003070:	4690      	mov	r8, r2
 8003072:	461f      	mov	r7, r3
 8003074:	d838      	bhi.n	80030e8 <__ssputs_r+0x84>
 8003076:	898a      	ldrh	r2, [r1, #12]
 8003078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800307c:	d032      	beq.n	80030e4 <__ssputs_r+0x80>
 800307e:	6825      	ldr	r5, [r4, #0]
 8003080:	6909      	ldr	r1, [r1, #16]
 8003082:	eba5 0901 	sub.w	r9, r5, r1
 8003086:	6965      	ldr	r5, [r4, #20]
 8003088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800308c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003090:	3301      	adds	r3, #1
 8003092:	444b      	add	r3, r9
 8003094:	106d      	asrs	r5, r5, #1
 8003096:	429d      	cmp	r5, r3
 8003098:	bf38      	it	cc
 800309a:	461d      	movcc	r5, r3
 800309c:	0553      	lsls	r3, r2, #21
 800309e:	d531      	bpl.n	8003104 <__ssputs_r+0xa0>
 80030a0:	4629      	mov	r1, r5
 80030a2:	f000 fb47 	bl	8003734 <_malloc_r>
 80030a6:	4606      	mov	r6, r0
 80030a8:	b950      	cbnz	r0, 80030c0 <__ssputs_r+0x5c>
 80030aa:	230c      	movs	r3, #12
 80030ac:	f8ca 3000 	str.w	r3, [sl]
 80030b0:	89a3      	ldrh	r3, [r4, #12]
 80030b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b6:	81a3      	strh	r3, [r4, #12]
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295
 80030bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c0:	6921      	ldr	r1, [r4, #16]
 80030c2:	464a      	mov	r2, r9
 80030c4:	f000 fabe 	bl	8003644 <memcpy>
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	6126      	str	r6, [r4, #16]
 80030d6:	6165      	str	r5, [r4, #20]
 80030d8:	444e      	add	r6, r9
 80030da:	eba5 0509 	sub.w	r5, r5, r9
 80030de:	6026      	str	r6, [r4, #0]
 80030e0:	60a5      	str	r5, [r4, #8]
 80030e2:	463e      	mov	r6, r7
 80030e4:	42be      	cmp	r6, r7
 80030e6:	d900      	bls.n	80030ea <__ssputs_r+0x86>
 80030e8:	463e      	mov	r6, r7
 80030ea:	4632      	mov	r2, r6
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	4641      	mov	r1, r8
 80030f0:	f000 fab6 	bl	8003660 <memmove>
 80030f4:	68a3      	ldr	r3, [r4, #8]
 80030f6:	6822      	ldr	r2, [r4, #0]
 80030f8:	1b9b      	subs	r3, r3, r6
 80030fa:	4432      	add	r2, r6
 80030fc:	60a3      	str	r3, [r4, #8]
 80030fe:	6022      	str	r2, [r4, #0]
 8003100:	2000      	movs	r0, #0
 8003102:	e7db      	b.n	80030bc <__ssputs_r+0x58>
 8003104:	462a      	mov	r2, r5
 8003106:	f000 fb6f 	bl	80037e8 <_realloc_r>
 800310a:	4606      	mov	r6, r0
 800310c:	2800      	cmp	r0, #0
 800310e:	d1e1      	bne.n	80030d4 <__ssputs_r+0x70>
 8003110:	6921      	ldr	r1, [r4, #16]
 8003112:	4650      	mov	r0, sl
 8003114:	f000 fabe 	bl	8003694 <_free_r>
 8003118:	e7c7      	b.n	80030aa <__ssputs_r+0x46>
	...

0800311c <_svfiprintf_r>:
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	4698      	mov	r8, r3
 8003122:	898b      	ldrh	r3, [r1, #12]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	b09d      	sub	sp, #116	; 0x74
 8003128:	4607      	mov	r7, r0
 800312a:	460d      	mov	r5, r1
 800312c:	4614      	mov	r4, r2
 800312e:	d50e      	bpl.n	800314e <_svfiprintf_r+0x32>
 8003130:	690b      	ldr	r3, [r1, #16]
 8003132:	b963      	cbnz	r3, 800314e <_svfiprintf_r+0x32>
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	f000 fafd 	bl	8003734 <_malloc_r>
 800313a:	6028      	str	r0, [r5, #0]
 800313c:	6128      	str	r0, [r5, #16]
 800313e:	b920      	cbnz	r0, 800314a <_svfiprintf_r+0x2e>
 8003140:	230c      	movs	r3, #12
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	e0d1      	b.n	80032ee <_svfiprintf_r+0x1d2>
 800314a:	2340      	movs	r3, #64	; 0x40
 800314c:	616b      	str	r3, [r5, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	9309      	str	r3, [sp, #36]	; 0x24
 8003152:	2320      	movs	r3, #32
 8003154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003158:	f8cd 800c 	str.w	r8, [sp, #12]
 800315c:	2330      	movs	r3, #48	; 0x30
 800315e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003308 <_svfiprintf_r+0x1ec>
 8003162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003166:	f04f 0901 	mov.w	r9, #1
 800316a:	4623      	mov	r3, r4
 800316c:	469a      	mov	sl, r3
 800316e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003172:	b10a      	cbz	r2, 8003178 <_svfiprintf_r+0x5c>
 8003174:	2a25      	cmp	r2, #37	; 0x25
 8003176:	d1f9      	bne.n	800316c <_svfiprintf_r+0x50>
 8003178:	ebba 0b04 	subs.w	fp, sl, r4
 800317c:	d00b      	beq.n	8003196 <_svfiprintf_r+0x7a>
 800317e:	465b      	mov	r3, fp
 8003180:	4622      	mov	r2, r4
 8003182:	4629      	mov	r1, r5
 8003184:	4638      	mov	r0, r7
 8003186:	f7ff ff6d 	bl	8003064 <__ssputs_r>
 800318a:	3001      	adds	r0, #1
 800318c:	f000 80aa 	beq.w	80032e4 <_svfiprintf_r+0x1c8>
 8003190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003192:	445a      	add	r2, fp
 8003194:	9209      	str	r2, [sp, #36]	; 0x24
 8003196:	f89a 3000 	ldrb.w	r3, [sl]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80a2 	beq.w	80032e4 <_svfiprintf_r+0x1c8>
 80031a0:	2300      	movs	r3, #0
 80031a2:	f04f 32ff 	mov.w	r2, #4294967295
 80031a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031aa:	f10a 0a01 	add.w	sl, sl, #1
 80031ae:	9304      	str	r3, [sp, #16]
 80031b0:	9307      	str	r3, [sp, #28]
 80031b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031b6:	931a      	str	r3, [sp, #104]	; 0x68
 80031b8:	4654      	mov	r4, sl
 80031ba:	2205      	movs	r2, #5
 80031bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031c0:	4851      	ldr	r0, [pc, #324]	; (8003308 <_svfiprintf_r+0x1ec>)
 80031c2:	f7fd f80d 	bl	80001e0 <memchr>
 80031c6:	9a04      	ldr	r2, [sp, #16]
 80031c8:	b9d8      	cbnz	r0, 8003202 <_svfiprintf_r+0xe6>
 80031ca:	06d0      	lsls	r0, r2, #27
 80031cc:	bf44      	itt	mi
 80031ce:	2320      	movmi	r3, #32
 80031d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031d4:	0711      	lsls	r1, r2, #28
 80031d6:	bf44      	itt	mi
 80031d8:	232b      	movmi	r3, #43	; 0x2b
 80031da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031de:	f89a 3000 	ldrb.w	r3, [sl]
 80031e2:	2b2a      	cmp	r3, #42	; 0x2a
 80031e4:	d015      	beq.n	8003212 <_svfiprintf_r+0xf6>
 80031e6:	9a07      	ldr	r2, [sp, #28]
 80031e8:	4654      	mov	r4, sl
 80031ea:	2000      	movs	r0, #0
 80031ec:	f04f 0c0a 	mov.w	ip, #10
 80031f0:	4621      	mov	r1, r4
 80031f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031f6:	3b30      	subs	r3, #48	; 0x30
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	d94e      	bls.n	800329a <_svfiprintf_r+0x17e>
 80031fc:	b1b0      	cbz	r0, 800322c <_svfiprintf_r+0x110>
 80031fe:	9207      	str	r2, [sp, #28]
 8003200:	e014      	b.n	800322c <_svfiprintf_r+0x110>
 8003202:	eba0 0308 	sub.w	r3, r0, r8
 8003206:	fa09 f303 	lsl.w	r3, r9, r3
 800320a:	4313      	orrs	r3, r2
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	46a2      	mov	sl, r4
 8003210:	e7d2      	b.n	80031b8 <_svfiprintf_r+0x9c>
 8003212:	9b03      	ldr	r3, [sp, #12]
 8003214:	1d19      	adds	r1, r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	9103      	str	r1, [sp, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	bfbb      	ittet	lt
 800321e:	425b      	neglt	r3, r3
 8003220:	f042 0202 	orrlt.w	r2, r2, #2
 8003224:	9307      	strge	r3, [sp, #28]
 8003226:	9307      	strlt	r3, [sp, #28]
 8003228:	bfb8      	it	lt
 800322a:	9204      	strlt	r2, [sp, #16]
 800322c:	7823      	ldrb	r3, [r4, #0]
 800322e:	2b2e      	cmp	r3, #46	; 0x2e
 8003230:	d10c      	bne.n	800324c <_svfiprintf_r+0x130>
 8003232:	7863      	ldrb	r3, [r4, #1]
 8003234:	2b2a      	cmp	r3, #42	; 0x2a
 8003236:	d135      	bne.n	80032a4 <_svfiprintf_r+0x188>
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9203      	str	r2, [sp, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	bfb8      	it	lt
 8003244:	f04f 33ff 	movlt.w	r3, #4294967295
 8003248:	3402      	adds	r4, #2
 800324a:	9305      	str	r3, [sp, #20]
 800324c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003318 <_svfiprintf_r+0x1fc>
 8003250:	7821      	ldrb	r1, [r4, #0]
 8003252:	2203      	movs	r2, #3
 8003254:	4650      	mov	r0, sl
 8003256:	f7fc ffc3 	bl	80001e0 <memchr>
 800325a:	b140      	cbz	r0, 800326e <_svfiprintf_r+0x152>
 800325c:	2340      	movs	r3, #64	; 0x40
 800325e:	eba0 000a 	sub.w	r0, r0, sl
 8003262:	fa03 f000 	lsl.w	r0, r3, r0
 8003266:	9b04      	ldr	r3, [sp, #16]
 8003268:	4303      	orrs	r3, r0
 800326a:	3401      	adds	r4, #1
 800326c:	9304      	str	r3, [sp, #16]
 800326e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003272:	4826      	ldr	r0, [pc, #152]	; (800330c <_svfiprintf_r+0x1f0>)
 8003274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003278:	2206      	movs	r2, #6
 800327a:	f7fc ffb1 	bl	80001e0 <memchr>
 800327e:	2800      	cmp	r0, #0
 8003280:	d038      	beq.n	80032f4 <_svfiprintf_r+0x1d8>
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <_svfiprintf_r+0x1f4>)
 8003284:	bb1b      	cbnz	r3, 80032ce <_svfiprintf_r+0x1b2>
 8003286:	9b03      	ldr	r3, [sp, #12]
 8003288:	3307      	adds	r3, #7
 800328a:	f023 0307 	bic.w	r3, r3, #7
 800328e:	3308      	adds	r3, #8
 8003290:	9303      	str	r3, [sp, #12]
 8003292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003294:	4433      	add	r3, r6
 8003296:	9309      	str	r3, [sp, #36]	; 0x24
 8003298:	e767      	b.n	800316a <_svfiprintf_r+0x4e>
 800329a:	fb0c 3202 	mla	r2, ip, r2, r3
 800329e:	460c      	mov	r4, r1
 80032a0:	2001      	movs	r0, #1
 80032a2:	e7a5      	b.n	80031f0 <_svfiprintf_r+0xd4>
 80032a4:	2300      	movs	r3, #0
 80032a6:	3401      	adds	r4, #1
 80032a8:	9305      	str	r3, [sp, #20]
 80032aa:	4619      	mov	r1, r3
 80032ac:	f04f 0c0a 	mov.w	ip, #10
 80032b0:	4620      	mov	r0, r4
 80032b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032b6:	3a30      	subs	r2, #48	; 0x30
 80032b8:	2a09      	cmp	r2, #9
 80032ba:	d903      	bls.n	80032c4 <_svfiprintf_r+0x1a8>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0c5      	beq.n	800324c <_svfiprintf_r+0x130>
 80032c0:	9105      	str	r1, [sp, #20]
 80032c2:	e7c3      	b.n	800324c <_svfiprintf_r+0x130>
 80032c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80032c8:	4604      	mov	r4, r0
 80032ca:	2301      	movs	r3, #1
 80032cc:	e7f0      	b.n	80032b0 <_svfiprintf_r+0x194>
 80032ce:	ab03      	add	r3, sp, #12
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	462a      	mov	r2, r5
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <_svfiprintf_r+0x1f8>)
 80032d6:	a904      	add	r1, sp, #16
 80032d8:	4638      	mov	r0, r7
 80032da:	f3af 8000 	nop.w
 80032de:	1c42      	adds	r2, r0, #1
 80032e0:	4606      	mov	r6, r0
 80032e2:	d1d6      	bne.n	8003292 <_svfiprintf_r+0x176>
 80032e4:	89ab      	ldrh	r3, [r5, #12]
 80032e6:	065b      	lsls	r3, r3, #25
 80032e8:	f53f af2c 	bmi.w	8003144 <_svfiprintf_r+0x28>
 80032ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032ee:	b01d      	add	sp, #116	; 0x74
 80032f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032f4:	ab03      	add	r3, sp, #12
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	462a      	mov	r2, r5
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <_svfiprintf_r+0x1f8>)
 80032fc:	a904      	add	r1, sp, #16
 80032fe:	4638      	mov	r0, r7
 8003300:	f000 f87a 	bl	80033f8 <_printf_i>
 8003304:	e7eb      	b.n	80032de <_svfiprintf_r+0x1c2>
 8003306:	bf00      	nop
 8003308:	080038bc 	.word	0x080038bc
 800330c:	080038c6 	.word	0x080038c6
 8003310:	00000000 	.word	0x00000000
 8003314:	08003065 	.word	0x08003065
 8003318:	080038c2 	.word	0x080038c2

0800331c <_printf_common>:
 800331c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003320:	4616      	mov	r6, r2
 8003322:	4699      	mov	r9, r3
 8003324:	688a      	ldr	r2, [r1, #8]
 8003326:	690b      	ldr	r3, [r1, #16]
 8003328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800332c:	4293      	cmp	r3, r2
 800332e:	bfb8      	it	lt
 8003330:	4613      	movlt	r3, r2
 8003332:	6033      	str	r3, [r6, #0]
 8003334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003338:	4607      	mov	r7, r0
 800333a:	460c      	mov	r4, r1
 800333c:	b10a      	cbz	r2, 8003342 <_printf_common+0x26>
 800333e:	3301      	adds	r3, #1
 8003340:	6033      	str	r3, [r6, #0]
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	0699      	lsls	r1, r3, #26
 8003346:	bf42      	ittt	mi
 8003348:	6833      	ldrmi	r3, [r6, #0]
 800334a:	3302      	addmi	r3, #2
 800334c:	6033      	strmi	r3, [r6, #0]
 800334e:	6825      	ldr	r5, [r4, #0]
 8003350:	f015 0506 	ands.w	r5, r5, #6
 8003354:	d106      	bne.n	8003364 <_printf_common+0x48>
 8003356:	f104 0a19 	add.w	sl, r4, #25
 800335a:	68e3      	ldr	r3, [r4, #12]
 800335c:	6832      	ldr	r2, [r6, #0]
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	42ab      	cmp	r3, r5
 8003362:	dc26      	bgt.n	80033b2 <_printf_common+0x96>
 8003364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003368:	1e13      	subs	r3, r2, #0
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	bf18      	it	ne
 800336e:	2301      	movne	r3, #1
 8003370:	0692      	lsls	r2, r2, #26
 8003372:	d42b      	bmi.n	80033cc <_printf_common+0xb0>
 8003374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003378:	4649      	mov	r1, r9
 800337a:	4638      	mov	r0, r7
 800337c:	47c0      	blx	r8
 800337e:	3001      	adds	r0, #1
 8003380:	d01e      	beq.n	80033c0 <_printf_common+0xa4>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	68e5      	ldr	r5, [r4, #12]
 8003386:	6832      	ldr	r2, [r6, #0]
 8003388:	f003 0306 	and.w	r3, r3, #6
 800338c:	2b04      	cmp	r3, #4
 800338e:	bf08      	it	eq
 8003390:	1aad      	subeq	r5, r5, r2
 8003392:	68a3      	ldr	r3, [r4, #8]
 8003394:	6922      	ldr	r2, [r4, #16]
 8003396:	bf0c      	ite	eq
 8003398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800339c:	2500      	movne	r5, #0
 800339e:	4293      	cmp	r3, r2
 80033a0:	bfc4      	itt	gt
 80033a2:	1a9b      	subgt	r3, r3, r2
 80033a4:	18ed      	addgt	r5, r5, r3
 80033a6:	2600      	movs	r6, #0
 80033a8:	341a      	adds	r4, #26
 80033aa:	42b5      	cmp	r5, r6
 80033ac:	d11a      	bne.n	80033e4 <_printf_common+0xc8>
 80033ae:	2000      	movs	r0, #0
 80033b0:	e008      	b.n	80033c4 <_printf_common+0xa8>
 80033b2:	2301      	movs	r3, #1
 80033b4:	4652      	mov	r2, sl
 80033b6:	4649      	mov	r1, r9
 80033b8:	4638      	mov	r0, r7
 80033ba:	47c0      	blx	r8
 80033bc:	3001      	adds	r0, #1
 80033be:	d103      	bne.n	80033c8 <_printf_common+0xac>
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c8:	3501      	adds	r5, #1
 80033ca:	e7c6      	b.n	800335a <_printf_common+0x3e>
 80033cc:	18e1      	adds	r1, r4, r3
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	2030      	movs	r0, #48	; 0x30
 80033d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033d6:	4422      	add	r2, r4
 80033d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033e0:	3302      	adds	r3, #2
 80033e2:	e7c7      	b.n	8003374 <_printf_common+0x58>
 80033e4:	2301      	movs	r3, #1
 80033e6:	4622      	mov	r2, r4
 80033e8:	4649      	mov	r1, r9
 80033ea:	4638      	mov	r0, r7
 80033ec:	47c0      	blx	r8
 80033ee:	3001      	adds	r0, #1
 80033f0:	d0e6      	beq.n	80033c0 <_printf_common+0xa4>
 80033f2:	3601      	adds	r6, #1
 80033f4:	e7d9      	b.n	80033aa <_printf_common+0x8e>
	...

080033f8 <_printf_i>:
 80033f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033fc:	460c      	mov	r4, r1
 80033fe:	4691      	mov	r9, r2
 8003400:	7e27      	ldrb	r7, [r4, #24]
 8003402:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003404:	2f78      	cmp	r7, #120	; 0x78
 8003406:	4680      	mov	r8, r0
 8003408:	469a      	mov	sl, r3
 800340a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800340e:	d807      	bhi.n	8003420 <_printf_i+0x28>
 8003410:	2f62      	cmp	r7, #98	; 0x62
 8003412:	d80a      	bhi.n	800342a <_printf_i+0x32>
 8003414:	2f00      	cmp	r7, #0
 8003416:	f000 80d8 	beq.w	80035ca <_printf_i+0x1d2>
 800341a:	2f58      	cmp	r7, #88	; 0x58
 800341c:	f000 80a3 	beq.w	8003566 <_printf_i+0x16e>
 8003420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003428:	e03a      	b.n	80034a0 <_printf_i+0xa8>
 800342a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800342e:	2b15      	cmp	r3, #21
 8003430:	d8f6      	bhi.n	8003420 <_printf_i+0x28>
 8003432:	a001      	add	r0, pc, #4	; (adr r0, 8003438 <_printf_i+0x40>)
 8003434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003438:	08003491 	.word	0x08003491
 800343c:	080034a5 	.word	0x080034a5
 8003440:	08003421 	.word	0x08003421
 8003444:	08003421 	.word	0x08003421
 8003448:	08003421 	.word	0x08003421
 800344c:	08003421 	.word	0x08003421
 8003450:	080034a5 	.word	0x080034a5
 8003454:	08003421 	.word	0x08003421
 8003458:	08003421 	.word	0x08003421
 800345c:	08003421 	.word	0x08003421
 8003460:	08003421 	.word	0x08003421
 8003464:	080035b1 	.word	0x080035b1
 8003468:	080034d5 	.word	0x080034d5
 800346c:	08003593 	.word	0x08003593
 8003470:	08003421 	.word	0x08003421
 8003474:	08003421 	.word	0x08003421
 8003478:	080035d3 	.word	0x080035d3
 800347c:	08003421 	.word	0x08003421
 8003480:	080034d5 	.word	0x080034d5
 8003484:	08003421 	.word	0x08003421
 8003488:	08003421 	.word	0x08003421
 800348c:	0800359b 	.word	0x0800359b
 8003490:	680b      	ldr	r3, [r1, #0]
 8003492:	1d1a      	adds	r2, r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	600a      	str	r2, [r1, #0]
 8003498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800349c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0a3      	b.n	80035ec <_printf_i+0x1f4>
 80034a4:	6825      	ldr	r5, [r4, #0]
 80034a6:	6808      	ldr	r0, [r1, #0]
 80034a8:	062e      	lsls	r6, r5, #24
 80034aa:	f100 0304 	add.w	r3, r0, #4
 80034ae:	d50a      	bpl.n	80034c6 <_printf_i+0xce>
 80034b0:	6805      	ldr	r5, [r0, #0]
 80034b2:	600b      	str	r3, [r1, #0]
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	da03      	bge.n	80034c0 <_printf_i+0xc8>
 80034b8:	232d      	movs	r3, #45	; 0x2d
 80034ba:	426d      	negs	r5, r5
 80034bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c0:	485e      	ldr	r0, [pc, #376]	; (800363c <_printf_i+0x244>)
 80034c2:	230a      	movs	r3, #10
 80034c4:	e019      	b.n	80034fa <_printf_i+0x102>
 80034c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80034ca:	6805      	ldr	r5, [r0, #0]
 80034cc:	600b      	str	r3, [r1, #0]
 80034ce:	bf18      	it	ne
 80034d0:	b22d      	sxthne	r5, r5
 80034d2:	e7ef      	b.n	80034b4 <_printf_i+0xbc>
 80034d4:	680b      	ldr	r3, [r1, #0]
 80034d6:	6825      	ldr	r5, [r4, #0]
 80034d8:	1d18      	adds	r0, r3, #4
 80034da:	6008      	str	r0, [r1, #0]
 80034dc:	0628      	lsls	r0, r5, #24
 80034de:	d501      	bpl.n	80034e4 <_printf_i+0xec>
 80034e0:	681d      	ldr	r5, [r3, #0]
 80034e2:	e002      	b.n	80034ea <_printf_i+0xf2>
 80034e4:	0669      	lsls	r1, r5, #25
 80034e6:	d5fb      	bpl.n	80034e0 <_printf_i+0xe8>
 80034e8:	881d      	ldrh	r5, [r3, #0]
 80034ea:	4854      	ldr	r0, [pc, #336]	; (800363c <_printf_i+0x244>)
 80034ec:	2f6f      	cmp	r7, #111	; 0x6f
 80034ee:	bf0c      	ite	eq
 80034f0:	2308      	moveq	r3, #8
 80034f2:	230a      	movne	r3, #10
 80034f4:	2100      	movs	r1, #0
 80034f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034fa:	6866      	ldr	r6, [r4, #4]
 80034fc:	60a6      	str	r6, [r4, #8]
 80034fe:	2e00      	cmp	r6, #0
 8003500:	bfa2      	ittt	ge
 8003502:	6821      	ldrge	r1, [r4, #0]
 8003504:	f021 0104 	bicge.w	r1, r1, #4
 8003508:	6021      	strge	r1, [r4, #0]
 800350a:	b90d      	cbnz	r5, 8003510 <_printf_i+0x118>
 800350c:	2e00      	cmp	r6, #0
 800350e:	d04d      	beq.n	80035ac <_printf_i+0x1b4>
 8003510:	4616      	mov	r6, r2
 8003512:	fbb5 f1f3 	udiv	r1, r5, r3
 8003516:	fb03 5711 	mls	r7, r3, r1, r5
 800351a:	5dc7      	ldrb	r7, [r0, r7]
 800351c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003520:	462f      	mov	r7, r5
 8003522:	42bb      	cmp	r3, r7
 8003524:	460d      	mov	r5, r1
 8003526:	d9f4      	bls.n	8003512 <_printf_i+0x11a>
 8003528:	2b08      	cmp	r3, #8
 800352a:	d10b      	bne.n	8003544 <_printf_i+0x14c>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	07df      	lsls	r7, r3, #31
 8003530:	d508      	bpl.n	8003544 <_printf_i+0x14c>
 8003532:	6923      	ldr	r3, [r4, #16]
 8003534:	6861      	ldr	r1, [r4, #4]
 8003536:	4299      	cmp	r1, r3
 8003538:	bfde      	ittt	le
 800353a:	2330      	movle	r3, #48	; 0x30
 800353c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003540:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003544:	1b92      	subs	r2, r2, r6
 8003546:	6122      	str	r2, [r4, #16]
 8003548:	f8cd a000 	str.w	sl, [sp]
 800354c:	464b      	mov	r3, r9
 800354e:	aa03      	add	r2, sp, #12
 8003550:	4621      	mov	r1, r4
 8003552:	4640      	mov	r0, r8
 8003554:	f7ff fee2 	bl	800331c <_printf_common>
 8003558:	3001      	adds	r0, #1
 800355a:	d14c      	bne.n	80035f6 <_printf_i+0x1fe>
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
 8003560:	b004      	add	sp, #16
 8003562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003566:	4835      	ldr	r0, [pc, #212]	; (800363c <_printf_i+0x244>)
 8003568:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	680e      	ldr	r6, [r1, #0]
 8003570:	061f      	lsls	r7, r3, #24
 8003572:	f856 5b04 	ldr.w	r5, [r6], #4
 8003576:	600e      	str	r6, [r1, #0]
 8003578:	d514      	bpl.n	80035a4 <_printf_i+0x1ac>
 800357a:	07d9      	lsls	r1, r3, #31
 800357c:	bf44      	itt	mi
 800357e:	f043 0320 	orrmi.w	r3, r3, #32
 8003582:	6023      	strmi	r3, [r4, #0]
 8003584:	b91d      	cbnz	r5, 800358e <_printf_i+0x196>
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	f023 0320 	bic.w	r3, r3, #32
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	2310      	movs	r3, #16
 8003590:	e7b0      	b.n	80034f4 <_printf_i+0xfc>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	f043 0320 	orr.w	r3, r3, #32
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	2378      	movs	r3, #120	; 0x78
 800359c:	4828      	ldr	r0, [pc, #160]	; (8003640 <_printf_i+0x248>)
 800359e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035a2:	e7e3      	b.n	800356c <_printf_i+0x174>
 80035a4:	065e      	lsls	r6, r3, #25
 80035a6:	bf48      	it	mi
 80035a8:	b2ad      	uxthmi	r5, r5
 80035aa:	e7e6      	b.n	800357a <_printf_i+0x182>
 80035ac:	4616      	mov	r6, r2
 80035ae:	e7bb      	b.n	8003528 <_printf_i+0x130>
 80035b0:	680b      	ldr	r3, [r1, #0]
 80035b2:	6826      	ldr	r6, [r4, #0]
 80035b4:	6960      	ldr	r0, [r4, #20]
 80035b6:	1d1d      	adds	r5, r3, #4
 80035b8:	600d      	str	r5, [r1, #0]
 80035ba:	0635      	lsls	r5, r6, #24
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	d501      	bpl.n	80035c4 <_printf_i+0x1cc>
 80035c0:	6018      	str	r0, [r3, #0]
 80035c2:	e002      	b.n	80035ca <_printf_i+0x1d2>
 80035c4:	0671      	lsls	r1, r6, #25
 80035c6:	d5fb      	bpl.n	80035c0 <_printf_i+0x1c8>
 80035c8:	8018      	strh	r0, [r3, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	6123      	str	r3, [r4, #16]
 80035ce:	4616      	mov	r6, r2
 80035d0:	e7ba      	b.n	8003548 <_printf_i+0x150>
 80035d2:	680b      	ldr	r3, [r1, #0]
 80035d4:	1d1a      	adds	r2, r3, #4
 80035d6:	600a      	str	r2, [r1, #0]
 80035d8:	681e      	ldr	r6, [r3, #0]
 80035da:	6862      	ldr	r2, [r4, #4]
 80035dc:	2100      	movs	r1, #0
 80035de:	4630      	mov	r0, r6
 80035e0:	f7fc fdfe 	bl	80001e0 <memchr>
 80035e4:	b108      	cbz	r0, 80035ea <_printf_i+0x1f2>
 80035e6:	1b80      	subs	r0, r0, r6
 80035e8:	6060      	str	r0, [r4, #4]
 80035ea:	6863      	ldr	r3, [r4, #4]
 80035ec:	6123      	str	r3, [r4, #16]
 80035ee:	2300      	movs	r3, #0
 80035f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035f4:	e7a8      	b.n	8003548 <_printf_i+0x150>
 80035f6:	6923      	ldr	r3, [r4, #16]
 80035f8:	4632      	mov	r2, r6
 80035fa:	4649      	mov	r1, r9
 80035fc:	4640      	mov	r0, r8
 80035fe:	47d0      	blx	sl
 8003600:	3001      	adds	r0, #1
 8003602:	d0ab      	beq.n	800355c <_printf_i+0x164>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	079b      	lsls	r3, r3, #30
 8003608:	d413      	bmi.n	8003632 <_printf_i+0x23a>
 800360a:	68e0      	ldr	r0, [r4, #12]
 800360c:	9b03      	ldr	r3, [sp, #12]
 800360e:	4298      	cmp	r0, r3
 8003610:	bfb8      	it	lt
 8003612:	4618      	movlt	r0, r3
 8003614:	e7a4      	b.n	8003560 <_printf_i+0x168>
 8003616:	2301      	movs	r3, #1
 8003618:	4632      	mov	r2, r6
 800361a:	4649      	mov	r1, r9
 800361c:	4640      	mov	r0, r8
 800361e:	47d0      	blx	sl
 8003620:	3001      	adds	r0, #1
 8003622:	d09b      	beq.n	800355c <_printf_i+0x164>
 8003624:	3501      	adds	r5, #1
 8003626:	68e3      	ldr	r3, [r4, #12]
 8003628:	9903      	ldr	r1, [sp, #12]
 800362a:	1a5b      	subs	r3, r3, r1
 800362c:	42ab      	cmp	r3, r5
 800362e:	dcf2      	bgt.n	8003616 <_printf_i+0x21e>
 8003630:	e7eb      	b.n	800360a <_printf_i+0x212>
 8003632:	2500      	movs	r5, #0
 8003634:	f104 0619 	add.w	r6, r4, #25
 8003638:	e7f5      	b.n	8003626 <_printf_i+0x22e>
 800363a:	bf00      	nop
 800363c:	080038cd 	.word	0x080038cd
 8003640:	080038de 	.word	0x080038de

08003644 <memcpy>:
 8003644:	440a      	add	r2, r1
 8003646:	4291      	cmp	r1, r2
 8003648:	f100 33ff 	add.w	r3, r0, #4294967295
 800364c:	d100      	bne.n	8003650 <memcpy+0xc>
 800364e:	4770      	bx	lr
 8003650:	b510      	push	{r4, lr}
 8003652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800365a:	4291      	cmp	r1, r2
 800365c:	d1f9      	bne.n	8003652 <memcpy+0xe>
 800365e:	bd10      	pop	{r4, pc}

08003660 <memmove>:
 8003660:	4288      	cmp	r0, r1
 8003662:	b510      	push	{r4, lr}
 8003664:	eb01 0402 	add.w	r4, r1, r2
 8003668:	d902      	bls.n	8003670 <memmove+0x10>
 800366a:	4284      	cmp	r4, r0
 800366c:	4623      	mov	r3, r4
 800366e:	d807      	bhi.n	8003680 <memmove+0x20>
 8003670:	1e43      	subs	r3, r0, #1
 8003672:	42a1      	cmp	r1, r4
 8003674:	d008      	beq.n	8003688 <memmove+0x28>
 8003676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800367a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800367e:	e7f8      	b.n	8003672 <memmove+0x12>
 8003680:	4402      	add	r2, r0
 8003682:	4601      	mov	r1, r0
 8003684:	428a      	cmp	r2, r1
 8003686:	d100      	bne.n	800368a <memmove+0x2a>
 8003688:	bd10      	pop	{r4, pc}
 800368a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800368e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003692:	e7f7      	b.n	8003684 <memmove+0x24>

08003694 <_free_r>:
 8003694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003696:	2900      	cmp	r1, #0
 8003698:	d048      	beq.n	800372c <_free_r+0x98>
 800369a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800369e:	9001      	str	r0, [sp, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f1a1 0404 	sub.w	r4, r1, #4
 80036a6:	bfb8      	it	lt
 80036a8:	18e4      	addlt	r4, r4, r3
 80036aa:	f000 f8d3 	bl	8003854 <__malloc_lock>
 80036ae:	4a20      	ldr	r2, [pc, #128]	; (8003730 <_free_r+0x9c>)
 80036b0:	9801      	ldr	r0, [sp, #4]
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	4615      	mov	r5, r2
 80036b6:	b933      	cbnz	r3, 80036c6 <_free_r+0x32>
 80036b8:	6063      	str	r3, [r4, #4]
 80036ba:	6014      	str	r4, [r2, #0]
 80036bc:	b003      	add	sp, #12
 80036be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036c2:	f000 b8cd 	b.w	8003860 <__malloc_unlock>
 80036c6:	42a3      	cmp	r3, r4
 80036c8:	d90b      	bls.n	80036e2 <_free_r+0x4e>
 80036ca:	6821      	ldr	r1, [r4, #0]
 80036cc:	1862      	adds	r2, r4, r1
 80036ce:	4293      	cmp	r3, r2
 80036d0:	bf04      	itt	eq
 80036d2:	681a      	ldreq	r2, [r3, #0]
 80036d4:	685b      	ldreq	r3, [r3, #4]
 80036d6:	6063      	str	r3, [r4, #4]
 80036d8:	bf04      	itt	eq
 80036da:	1852      	addeq	r2, r2, r1
 80036dc:	6022      	streq	r2, [r4, #0]
 80036de:	602c      	str	r4, [r5, #0]
 80036e0:	e7ec      	b.n	80036bc <_free_r+0x28>
 80036e2:	461a      	mov	r2, r3
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	b10b      	cbz	r3, 80036ec <_free_r+0x58>
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	d9fa      	bls.n	80036e2 <_free_r+0x4e>
 80036ec:	6811      	ldr	r1, [r2, #0]
 80036ee:	1855      	adds	r5, r2, r1
 80036f0:	42a5      	cmp	r5, r4
 80036f2:	d10b      	bne.n	800370c <_free_r+0x78>
 80036f4:	6824      	ldr	r4, [r4, #0]
 80036f6:	4421      	add	r1, r4
 80036f8:	1854      	adds	r4, r2, r1
 80036fa:	42a3      	cmp	r3, r4
 80036fc:	6011      	str	r1, [r2, #0]
 80036fe:	d1dd      	bne.n	80036bc <_free_r+0x28>
 8003700:	681c      	ldr	r4, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	6053      	str	r3, [r2, #4]
 8003706:	4421      	add	r1, r4
 8003708:	6011      	str	r1, [r2, #0]
 800370a:	e7d7      	b.n	80036bc <_free_r+0x28>
 800370c:	d902      	bls.n	8003714 <_free_r+0x80>
 800370e:	230c      	movs	r3, #12
 8003710:	6003      	str	r3, [r0, #0]
 8003712:	e7d3      	b.n	80036bc <_free_r+0x28>
 8003714:	6825      	ldr	r5, [r4, #0]
 8003716:	1961      	adds	r1, r4, r5
 8003718:	428b      	cmp	r3, r1
 800371a:	bf04      	itt	eq
 800371c:	6819      	ldreq	r1, [r3, #0]
 800371e:	685b      	ldreq	r3, [r3, #4]
 8003720:	6063      	str	r3, [r4, #4]
 8003722:	bf04      	itt	eq
 8003724:	1949      	addeq	r1, r1, r5
 8003726:	6021      	streq	r1, [r4, #0]
 8003728:	6054      	str	r4, [r2, #4]
 800372a:	e7c7      	b.n	80036bc <_free_r+0x28>
 800372c:	b003      	add	sp, #12
 800372e:	bd30      	pop	{r4, r5, pc}
 8003730:	20000094 	.word	0x20000094

08003734 <_malloc_r>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	1ccd      	adds	r5, r1, #3
 8003738:	f025 0503 	bic.w	r5, r5, #3
 800373c:	3508      	adds	r5, #8
 800373e:	2d0c      	cmp	r5, #12
 8003740:	bf38      	it	cc
 8003742:	250c      	movcc	r5, #12
 8003744:	2d00      	cmp	r5, #0
 8003746:	4606      	mov	r6, r0
 8003748:	db01      	blt.n	800374e <_malloc_r+0x1a>
 800374a:	42a9      	cmp	r1, r5
 800374c:	d903      	bls.n	8003756 <_malloc_r+0x22>
 800374e:	230c      	movs	r3, #12
 8003750:	6033      	str	r3, [r6, #0]
 8003752:	2000      	movs	r0, #0
 8003754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003756:	f000 f87d 	bl	8003854 <__malloc_lock>
 800375a:	4921      	ldr	r1, [pc, #132]	; (80037e0 <_malloc_r+0xac>)
 800375c:	680a      	ldr	r2, [r1, #0]
 800375e:	4614      	mov	r4, r2
 8003760:	b99c      	cbnz	r4, 800378a <_malloc_r+0x56>
 8003762:	4f20      	ldr	r7, [pc, #128]	; (80037e4 <_malloc_r+0xb0>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b923      	cbnz	r3, 8003772 <_malloc_r+0x3e>
 8003768:	4621      	mov	r1, r4
 800376a:	4630      	mov	r0, r6
 800376c:	f000 f862 	bl	8003834 <_sbrk_r>
 8003770:	6038      	str	r0, [r7, #0]
 8003772:	4629      	mov	r1, r5
 8003774:	4630      	mov	r0, r6
 8003776:	f000 f85d 	bl	8003834 <_sbrk_r>
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	d123      	bne.n	80037c6 <_malloc_r+0x92>
 800377e:	230c      	movs	r3, #12
 8003780:	6033      	str	r3, [r6, #0]
 8003782:	4630      	mov	r0, r6
 8003784:	f000 f86c 	bl	8003860 <__malloc_unlock>
 8003788:	e7e3      	b.n	8003752 <_malloc_r+0x1e>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	1b5b      	subs	r3, r3, r5
 800378e:	d417      	bmi.n	80037c0 <_malloc_r+0x8c>
 8003790:	2b0b      	cmp	r3, #11
 8003792:	d903      	bls.n	800379c <_malloc_r+0x68>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	441c      	add	r4, r3
 8003798:	6025      	str	r5, [r4, #0]
 800379a:	e004      	b.n	80037a6 <_malloc_r+0x72>
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	42a2      	cmp	r2, r4
 80037a0:	bf0c      	ite	eq
 80037a2:	600b      	streq	r3, [r1, #0]
 80037a4:	6053      	strne	r3, [r2, #4]
 80037a6:	4630      	mov	r0, r6
 80037a8:	f000 f85a 	bl	8003860 <__malloc_unlock>
 80037ac:	f104 000b 	add.w	r0, r4, #11
 80037b0:	1d23      	adds	r3, r4, #4
 80037b2:	f020 0007 	bic.w	r0, r0, #7
 80037b6:	1ac2      	subs	r2, r0, r3
 80037b8:	d0cc      	beq.n	8003754 <_malloc_r+0x20>
 80037ba:	1a1b      	subs	r3, r3, r0
 80037bc:	50a3      	str	r3, [r4, r2]
 80037be:	e7c9      	b.n	8003754 <_malloc_r+0x20>
 80037c0:	4622      	mov	r2, r4
 80037c2:	6864      	ldr	r4, [r4, #4]
 80037c4:	e7cc      	b.n	8003760 <_malloc_r+0x2c>
 80037c6:	1cc4      	adds	r4, r0, #3
 80037c8:	f024 0403 	bic.w	r4, r4, #3
 80037cc:	42a0      	cmp	r0, r4
 80037ce:	d0e3      	beq.n	8003798 <_malloc_r+0x64>
 80037d0:	1a21      	subs	r1, r4, r0
 80037d2:	4630      	mov	r0, r6
 80037d4:	f000 f82e 	bl	8003834 <_sbrk_r>
 80037d8:	3001      	adds	r0, #1
 80037da:	d1dd      	bne.n	8003798 <_malloc_r+0x64>
 80037dc:	e7cf      	b.n	800377e <_malloc_r+0x4a>
 80037de:	bf00      	nop
 80037e0:	20000094 	.word	0x20000094
 80037e4:	20000098 	.word	0x20000098

080037e8 <_realloc_r>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	4607      	mov	r7, r0
 80037ec:	4614      	mov	r4, r2
 80037ee:	460e      	mov	r6, r1
 80037f0:	b921      	cbnz	r1, 80037fc <_realloc_r+0x14>
 80037f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037f6:	4611      	mov	r1, r2
 80037f8:	f7ff bf9c 	b.w	8003734 <_malloc_r>
 80037fc:	b922      	cbnz	r2, 8003808 <_realloc_r+0x20>
 80037fe:	f7ff ff49 	bl	8003694 <_free_r>
 8003802:	4625      	mov	r5, r4
 8003804:	4628      	mov	r0, r5
 8003806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003808:	f000 f830 	bl	800386c <_malloc_usable_size_r>
 800380c:	42a0      	cmp	r0, r4
 800380e:	d20f      	bcs.n	8003830 <_realloc_r+0x48>
 8003810:	4621      	mov	r1, r4
 8003812:	4638      	mov	r0, r7
 8003814:	f7ff ff8e 	bl	8003734 <_malloc_r>
 8003818:	4605      	mov	r5, r0
 800381a:	2800      	cmp	r0, #0
 800381c:	d0f2      	beq.n	8003804 <_realloc_r+0x1c>
 800381e:	4631      	mov	r1, r6
 8003820:	4622      	mov	r2, r4
 8003822:	f7ff ff0f 	bl	8003644 <memcpy>
 8003826:	4631      	mov	r1, r6
 8003828:	4638      	mov	r0, r7
 800382a:	f7ff ff33 	bl	8003694 <_free_r>
 800382e:	e7e9      	b.n	8003804 <_realloc_r+0x1c>
 8003830:	4635      	mov	r5, r6
 8003832:	e7e7      	b.n	8003804 <_realloc_r+0x1c>

08003834 <_sbrk_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4d06      	ldr	r5, [pc, #24]	; (8003850 <_sbrk_r+0x1c>)
 8003838:	2300      	movs	r3, #0
 800383a:	4604      	mov	r4, r0
 800383c:	4608      	mov	r0, r1
 800383e:	602b      	str	r3, [r5, #0]
 8003840:	f7fd fe3c 	bl	80014bc <_sbrk>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_sbrk_r+0x1a>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_sbrk_r+0x1a>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	2000013c 	.word	0x2000013c

08003854 <__malloc_lock>:
 8003854:	4801      	ldr	r0, [pc, #4]	; (800385c <__malloc_lock+0x8>)
 8003856:	f000 b811 	b.w	800387c <__retarget_lock_acquire_recursive>
 800385a:	bf00      	nop
 800385c:	20000144 	.word	0x20000144

08003860 <__malloc_unlock>:
 8003860:	4801      	ldr	r0, [pc, #4]	; (8003868 <__malloc_unlock+0x8>)
 8003862:	f000 b80c 	b.w	800387e <__retarget_lock_release_recursive>
 8003866:	bf00      	nop
 8003868:	20000144 	.word	0x20000144

0800386c <_malloc_usable_size_r>:
 800386c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003870:	1f18      	subs	r0, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	bfbc      	itt	lt
 8003876:	580b      	ldrlt	r3, [r1, r0]
 8003878:	18c0      	addlt	r0, r0, r3
 800387a:	4770      	bx	lr

0800387c <__retarget_lock_acquire_recursive>:
 800387c:	4770      	bx	lr

0800387e <__retarget_lock_release_recursive>:
 800387e:	4770      	bx	lr

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
